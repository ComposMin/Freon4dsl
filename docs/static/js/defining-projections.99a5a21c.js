(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./src/defining_projections.md":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return l});var a=n("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),b=(n("../../node_modules/react/index.js"),n("../../node_modules/@mdx-js/react/dist/index.es.js")),i={},r="wrapper";function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(b.b)(r,Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"defining-projections"},"Defining Projections"),Object(b.b)("p",null,"The layout fo everything in ProjectIt is defined using boxes.",Object(b.b)("br",{parentName:"p"}),"\n","A box is a rectangular area in the editor.",Object(b.b)("br",{parentName:"p"}),"\n","The are many different types of boxes in ProjectIt, e.g. a LabelBox for static text, a TextBox for editable text, and SVG box for SVG graphics, etc. etc.  "),Object(b.b)("p",null,"The first step in creating a projectional editor is o define the projection for language.",Object(b.b)("br",{parentName:"p"}),"\n","To do this, you need to define a mapping from the constructs in your language to ",Object(b.b)("em",{parentName:"p"},"boxes"),".  "),Object(b.b)("p",null,"A small example to start with:  "),Object(b.b)("p",null,Object(b.b)("img",Object.assign({parentName:"p"},{src:"../public/images/mapping-example-stringliteral.svg",alt:null})),"  "),Object(b.b)("p",null,"In the language we are using we have the concept of a ",Object(b.b)("em",{parentName:"p"},"StringLiteral"),".",Object(b.b)("br",{parentName:"p"}),"\n",'The projection maps this to a horizontal list of labels with fixed text ",',Object(b.b)("br",{parentName:"p"}),"\n","an editable text with the value of the StringLiteral and then another label.  "),Object(b.b)("p",null,"In TypeScript this projection might look something like:  "),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'new HorizontalListBox( [  \n new LabelBox("\\""), new TextBox(stringLiteral.value),  \n new LabelBox("\\"") ]);```  \n')),Object(b.b)("p",null,"b\nWe can see that the user interacts with the projection.",Object(b.b)("br",{parentName:"p"}),"\n","To be able to define the user interaction, we need to be able to know",Object(b.b)("br",{parentName:"p"}),"\n","which part of the projection the user is working with.  "),Object(b.b)("p",null,"Therefore we need to know of which element in the model/AST a box is a projection",Object(b.b)("br",{parentName:"p"}),"\n","and also be able to distinguish the different boxes for one element.",Object(b.b)("br",{parentName:"p"}),"\n","For this purpose we give each Box in the projection a ",Object(b.b)("em",{parentName:"p"},"role"),".  "),Object(b.b)("p",null,Object(b.b)("img",Object.assign({parentName:"p"},{src:"../public/images/mapping-example-stringliteral-with-roles.svg",alt:null})),"  "),Object(b.b)("p",null,"In this picture the roles are shown above the boxes in green.",Object(b.b)("br",{parentName:"p"}),"\n","We cabn now show the full typescript code for creating this projection.",Object(b.b)("br",{parentName:"p"}),"\n","Given  that ",Object(b.b)("inlineCode",{parentName:"p"},"literal")," is the StringLiteral object:  "),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"include::{demodir}/editor/DemoProjection.ts[tag=StringLiteral,indent=0]  \n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"The overall horizontal list box to group everything  "),Object(b.b)("li",{parentName:"ul"},"The first label box for the start quote  "),Object(b.b)("li",{parentName:"ul"},"The text box for the value of the string literal  "),Object(b.b)("li",{parentName:"ul"},"The second label box for the end quote  ")),Object(b.b)("p",null,"All box roles within the projection for a specific element should have a unique role.",Object(b.b)("br",{parentName:"p"}),"\n","This way we cn identify every box buy its model element + its role.  "),Object(b.b)("h2",{id:"box"},"Box"),Object(b.b)("p",null,"A Box is an abstract class describing the features that are common for all boxes.",Object(b.b)("br",{parentName:"p"}),"\n","As explained earlier, each box has a mandatory model element and role.  "),Object(b.b)("h2",{id:"labelbox"},"LabelBox"),Object(b.b)("p",null,"A LabelBox shows a non-editable text.",Object(b.b)("br",{parentName:"p"}),"\n","The text itself can either be a fixed string (1) ,  or it can be defined as a function (2).  "),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'new LabelBox(element, "role", "fixed text")         <1>  \nnew LabelBox(element, "role", () => element.value)  <2>  \n')),Object(b.b)("h2",{id:"textbox"},"TextBox"),Object(b.b)("p",null,"A TextBox shows an editable text.",Object(b.b)("br",{parentName:"p"}),"\n","In addition to the element and the role a text box needs two function parameters.",Object(b.b)("br",{parentName:"p"}),"\n","The first function to get the value of the text,",Object(b.b)("br",{parentName:"p"}),"\n","the second function to set the value of the text.  "),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'new TextBox(  \n  element,  \n "role", () => element.stringValue,  \n (newValue: string) => element.stringValue = newValue)  \n')),Object(b.b)("p",null,"There is a number of boxes available  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Primitive Boxes"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Grouping boxes"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"LabelBox"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"HorizontalListBox")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"TextBox"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"VerticalListBox")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"LineBox"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"GridBox")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"TextBox"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"SpacerBox"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"AliasBox"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))))),Object(b.b)("h2",{id:"svgbox"},"SvgBox"),Object(b.b)("h2",{id:"listbox"},"ListBox"),Object(b.b)("h3",{id:"horizontallistbox"},"HorizontalListBox"),Object(b.b)("h3",{id:"verticallistbox"},"VerticalListBox"),Object(b.b)("h3",{id:"verticalmodelelementlistbox"},"VerticalModelElementListBox"),Object(b.b)("h2",{id:"gridbox"},"GridBox"),Object(b.b)("h2",{id:"selectbox"},"SelectBox"),Object(b.b)("h2",{id:"aliasbox"},"AliasBox"))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/defining_projections.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=defining-projections.a29592233a4bc14fa95c.js.map