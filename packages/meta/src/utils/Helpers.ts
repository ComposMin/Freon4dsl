import * as fs from "fs";
import parserTypeScript = require("prettier/parser-typescript");
import { PiLogger } from "../../../core/src/util/PiLogging";
import { isRegExp } from "util";

const LOGGER = new PiLogger("FileHelpers").mute();
const prettier = require("prettier/standalone");
var path = require("path");

export class Helpers {
    public static generateManualFile(path: string, contents: string, message: string) {
        if (!fs.existsSync(path)) {
            fs.writeFileSync(path, contents);
        } else {
            LOGGER.info(this, "projectit-generate-editor: user file " + message + " already exists, skipping it.");
        }
    }

    public static pretty(typescriptFile: string, message: string): string {
        try {
            // LOGGER.log("Pretty printing generated code");
            return (
                "// Generated by the ProjectIt Language Generator.\n" +
                prettier.format(typescriptFile, {
                    parser: "typescript",
                    printWidth: 140,
                    tabWidth: 4,
                    plugins: [parserTypeScript]
                })
            );
        } catch (e) {
            LOGGER.error(this, "Syntax error in generated code: " + message);
            LOGGER.error(this, e.message);
            return "// Generated by the ProjectIt Language Generator.\n" + typescriptFile;
        }
    }

    public static createDirIfNotExisting(dir: string) {
        const parts = dir.split("/");
        let current = ".";
        for (let i = 0; i < parts.length; i++) {
            const part = parts[i];
            current = current + "/" + part;
            if (!fs.existsSync(current)) {
                LOGGER.log("creating folder: [" + dir + "]");
                fs.mkdirSync(current);
            }
        }
    }

    /**
     * files need to be deleted before the new files are generated
     * therefore we use the synchronous 'fs.readdirSync'
     * instead of 'fs.readdir'.
     */
    public static deleteFilesInDir(dir: string) {
        LOGGER.log("deleting files from folder: [" + dir + "]");
        let folder = "./" + dir;
        if (fs.existsSync(folder)) {
            fs.readdirSync(folder).forEach(file => {
                fs.unlink(path.join(folder, file), err => {
                    LOGGER.log("deleting file: [" + path.join(folder, file) + "]");
                    if (err) LOGGER.error(this, err.message + " " + err.path);
                });
            });
        } else {
            LOGGER.error(this, "Could not find folder: [" + folder + "]");
        }
    }

    /**
     * startPath: the folder where the files should be located
     * extension: a regular expression to filter the filenames found
     */
    public static findFiles(startPath: string, extension?: string): string[] {
        if (!fs.existsSync(startPath)) {
            LOGGER.error(this, "cannot find folder '" + startPath + "'");
            return [];
        }
        if (!fs.lstatSync(startPath).isDirectory()) {
            LOGGER.error(this, "'" + startPath + "' is not a folder");
            return [];
        }

        let result: string[] = [];
        var files = fs.readdirSync(startPath);
        for (var i = 0; i < files.length; i++) {
            var filename = path.join(startPath, files[i]);
            var stat = fs.lstatSync(filename);
            if (!stat.isDirectory()) {
                if (extension === undefined) {
                    result.push(filename);
                } else {
                    let regex = new RegExp(`\\${extension}\$`);
                    if (regex.test(filename)) {
                        result.push(filename);
                    }
                }
            }
        }
        return result;
    }
}
