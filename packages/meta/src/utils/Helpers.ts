import * as fs from "fs";
import parserTypeScript = require("prettier/parser-typescript");
import { PiLogger } from "../../../core/src/util/PiLogging";

const LOGGER = new PiLogger("FileHelpers"); // .mute();
const prettier = require("prettier/standalone");

export class Helpers {

    public static generateManualFile(path: string, contents: string, message: string) {
        if (!fs.existsSync(path)) {
            fs.writeFileSync(path, contents);
        } else {
            LOGGER.info(this, "projectit-generate-editor: user file " + message + " already exists, skipping it.");
        }
    }

    public static pretty(typescriptFile: string, message: string, verbose?: boolean): string {
        try {
            if (verbose) LOGGER.log("Pretty printing generated code");
            return "// Generated by the ProjectIt Language Generator.\n" +
                prettier.format(typescriptFile, {
                    parser: "typescript",
                    printWidth: 140,
                    tabWidth: 4,
                    plugins: [parserTypeScript]
                });
        } catch (e) {
            LOGGER.error(this, "Syntax error in generated code: " + message);
            LOGGER.error(this, e.message);
            return "// Generated by the ProjectIt Language Generator.\n" + typescriptFile;
        }
    }

    public static createDirIfNotExisting(dir: string, verbose?: boolean) {
        const parts = dir.split("/");
        let current = ".";
        for (let i = 0; i < parts.length; i++) {
            const part = parts[i];
            current = current + "/" + part;
            if (!fs.existsSync(current)) {
                if (verbose) LOGGER.log("creating folder: ["+ dir + "]");
                fs.mkdirSync(current);
            }
        }
    }

}
