// Generated by the ProjectIt Language Generator.
import { PiClassifier, PiElementReference } from "../../languagedef/metalanguage";
import { PitProperty } from "./PitProperty";
import { PiLanguageMetaType } from "@projectit/playground/dist/pi-languages/language/gen";

/**
 * Class PitTypeConcept is the implementation of the concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to changes in the state of its properties.
 */
export class PitTypeConcept extends PiClassifier {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data
     */
    static create(data: Partial<PitTypeConcept>): PitTypeConcept {
        const result = new PitTypeConcept();
        if (!!data.name) {
            result.name = data.name;
        }
        if (!!data.properties) {
            data.properties.forEach(x => result.properties.push(x));
        }
        if (!!data.base) {
            result.base = data.base;
        }
        if (!!data.__base) {
            result.__base = data.__base;
        }
        if (!!data.location) {
            result.location = data.location;
        }
        if (data.agl_location) {
            result.agl_location = data.agl_location;
        }
        return result;
    }

    readonly $typename: string = "PitTypeConcept"; // holds the metatype in the form of a string

    properties: PitProperty[] = []; // implementation of part 'properties'
    __base: PiElementReference<PiClassifier>; // implementation of reference 'base'

    get base(): PiClassifier {
        if (!!this.__base && !!this.__base.referred) {
            return this.__base.referred;
        }
        return null;
    }
    set base(cls: PiClassifier) {
        if (!!cls) {
            this.__base = PiElementReference.create<PiClassifier>(cls, "PiClassifier");
        }
    }
    toPiString(): string {
        return 'type ' + this.name + (!!this.__base ? 'base ' + this.__base.name : '') + " {\n\t" +
            this.properties.map(p => p.toPiString()).join(";\n\t") + "\n} "
    }
}
