language Language

root concept Model {
    name: string
    @part entitites: Entity[]
    @part functions: Function[]
}

concept Entity {
    name: string
    @part attributes: Attribute[]
}

concept Attribute {
    name: string
    type: AttributeType
}

concept Function {
    name: string
    @part expression: Expression
    @reference parameters: Variable[]
}

concept Variable {
    name: string
    type: AttributeType
}

abstract expression concept Expression {}

expression placeholder concept PlaceholderExpression {}

abstract expression concept LiteralExpression base Expression {}

concept StringLiteralExpression base LiteralExpression {
    value: string
    @editor symbol: string = "'"
}

concept NumberLiteralExpression base LiteralExpression {
    value: string
    @editor symbol: string = "/[0-9]/"
}

concept AbsExpression base Expression {
    @part expr: Expression
    @editor symbol: string = "abs"
}

abstract binary expression concept BinaryExpression base Expression {
    @part left: Expression
    @part right: Expression
    @editor symbol: string = "unknown"
}

concept MultiplyExpression base BinaryExpression {
    @editor symbol: string = "*"
    @editor priority: number = "2"
}

concept PlusExpression base BinaryExpression {
    @editor symbol: string = "+"
    @editor priority: number = "4"
}

enumeration AttributeType {
    String
    Boolean
    Integer
}

concept DivideExpression base BinaryExpression {
    @editor symbol: string = "/"
    @editor priority: number = "2"
}

concept AndExpression base BinaryExpression {
    @editor symbol: string = "and"
    @editor priority: number = "12"
}

concept OrExpression base BinaryExpression {
    @editor symbol: string = "or"
    @editor priority: number = "12"
}

abstract concept ComparisonExpression base BinaryExpression {
}

concept LessThenExpression base ComparisonExpression {
    @editor symbol: string = "<"
    @editor priority: number = "10"
}

concept GreaterThenExpression base ComparisonExpression {
    @editor symbol: string = ">"
    @editor priority: number = "10"
}

concept EqualsExpression base ComparisonExpression {
    @editor symbol: string = "="
    @editor priority: number = "10"
}

concept FunctionCallExpression base Expression {
    @reference functionDefinition: Function
    @inferType functionDefinition.type
}

concept IfExpression base Expression {
    @part condition: Expression
    @part whenTrue: Expression
    @part whenFalse: Expression
}

concept VariableRef base Expression {
    referredName: string
    @reference variable: Variable
    @inferType variable.type
}

enumeration Color {
    Red
    Yellow
    Blue
}

