import { PiLanguage } from "../../../languagedef/metalanguage";
import { PiEditUnit } from "../../metalanguage";
import { LANGUAGE_GEN_FOLDER, Names, PROJECTITCORE, READER_GEN_FOLDER } from "../../../utils";

export class ReaderTemplate {

    /**
     * Returns a string representation of a generic parser for 'language'. This parser is able
     * to handle every modelunit in the language.
     */
    public generateParser(language: PiLanguage, editDef: PiEditUnit, relativePath: string): string {
        const unitNames = language.units.map(unit => Names.concept(unit));

        // Template starts here
        return `
        import { Parser } from "pegjs";
        import { ${Names.PiReader} } from "${PROJECTITCORE}";
        import { ${Names.modelunit(language)}, ModelUnitMetaType, ${unitNames.map(name => `${name}`).join(", ")} } from "${relativePath}${LANGUAGE_GEN_FOLDER }";   
              
        /**
         * All unit parsers generated by pegjs
         */
        ${language.units.map(unit => 
        `import * as ${Names.concept(unit)}Parser from ("./${Names.pegjs(unit)}");`).join("\n")}
        
        /**
        *   Class ${Names.reader(language)} is a wrapper for the various parsers of
        *   modelunits. It reads a file from disk, calls the javascript parser, and
        *   shows any syntax errors on the console.
        *   Note that property 'parser' should be set, before calling the method 'parse'.
        */
        export class ${Names.reader(language)} implements ${Names.PiReader} {
        
            readFromString(input: string, metatype: ModelUnitMetaType): ${Names.modelunit(language)} {
                return ${Names.reader(language)}.parse(input, metatype, "");
            }       
                 
            private static parse(langSpec: string, metatype: ModelUnitMetaType, filepath: string): ${Names.modelunit(language)} {
                // set the correct parser
                let parser: Parser; // one of the Javascript parser objects generated by pegjs.
                ${language.units.map(unit =>
                `if (metatype === "${Names.concept(unit)}") {
                    parser = ${Names.concept(unit)}Parser;
                }`).join("\n")}
                
                // parse the input
                let model: ${Names.modelunit(language)} = null;
                try {
                    model = parser.parse(langSpec);
                } catch (e) {
                    // throw syntax error, but with extra info
                    const errorstr = \`\${!!filepath ? \`\${filepath}:\` : \`\`} \${e} \${e.location && e.location.start ? \`[line \${e.location.start.line}, column \${e.location.start.column}]\` : \`\`}\`;
                    throw new Error(errorstr);
                }
                return model;
            }
        }
        `;
        // end Template
    }
}
