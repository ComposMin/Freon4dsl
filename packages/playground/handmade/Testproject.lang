language Testproject

root concept Model {
    functions: Function[];
    name: string;
    entities: Entity[];
}

interface BaseType {
    name: string;
}

interface Type base BaseType {
    simpleprop: boolean;
    int_attr: Attribute;
    int_functions: Function[];
    reference baseInterface: Entity;
}

concept Entity implements Type {
    name: string;
    isBool: boolean;
    isNumber: number;
    attributes: Attribute[];
    functions: Function[];
    reference baseEntity: Entity;
}

concept Attribute {
    reference declaredType: AttributeType; // a limited concept
    name: string;
}

concept Function {
    name: string;
    reference declaredType: Entity;
    expression: Expression;
    parameters: Variable[];
}

concept Variable {
    name: string;
    reference declaredType: Entity;
}

abstract concept SomeOther { // test abstract concept
    extra: boolean;
}

concept SomeOtherExtended base SomeOther {
    reference variable: Variable;
}

limited AttributeType implements BaseType {
    id: number;

    String  =   { "name": "string", "id": 3 }
    Integer =   { "name": "number", "id": 2 }
    Boolean =   { "name": "bool",   "id": 1 }
    ANY     =   { "name": "ANY",    "id": 0 }
}

// the rest is standard expression stuff

abstract expression Expression {
    appliedfeature: AppliedFeature;
}

expression AppliedFeature {
    appliedfeature: AppliedFeature;
    value: string;
    reference type: Entity;
}

abstract expression LiteralExpression base Expression {
    value: string;
}

expression StringLiteralExpression base LiteralExpression {
}

expression NumberLiteralExpression base LiteralExpression {
}

expression BooleanLiteralExpression base LiteralExpression {
}

expression AbsExpression base Expression {
    expr: Expression;
}

abstract binary expression BinaryExpression base Expression {
    left: Expression;
    right: Expression;
}

expression MultiplyExpression base BinaryExpression {
    priority = 8;
}

expression PlusExpression base BinaryExpression {
    priority = 4;
}

expression DivideExpression base BinaryExpression {
    priority = 8;
}

expression AndExpression base BinaryExpression {
    priority = 1;
}

expression OrExpression base BinaryExpression {
    priority = 1;
}

abstract expression ComparisonExpression base BinaryExpression {
}

expression LessThenExpression base ComparisonExpression {
    priority = 10;
}

expression GreaterThenExpression base ComparisonExpression {
    priority = 10;
}

expression EqualsExpression base ComparisonExpression {
    priority = 10;
}

expression FunctionCallExpression base Expression {
    reference functionDefinition: Function;
}

expression IfExpression base Expression {
    condition: Expression;
    whenTrue: Expression;
    whenFalse: Expression;
}

expression VariableRef base Expression {
    reference variable: Variable;
}
