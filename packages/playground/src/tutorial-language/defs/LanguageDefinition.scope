scoper Demo for language Demo

// tag::namespaces[]
isnamespace { DemoModel, DemoEntity, DemoFunction }
// end::namespaces[]

// tag::namespace_addition[]
DemoEntity {
    namespace_addition = self.baseEntity;
}
// end::namespace_addition[]

/*
Type {
    namespace_addition = self.baseInterface
}
*/

// tag::alternative_scope[]
AppliedFeature {
	scope = typeof( container );
}
// end::alternative_scope[]

//    t = typer.inferType(this.source) exclude: attributes where visibility = 'private'
//    include: if( t.friends.includes(context)) then t.attributes where visibility = 'friends'
