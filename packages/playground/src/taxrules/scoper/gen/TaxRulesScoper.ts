// Generated by the ProjectIt Language Generator (4/1/2020, 2:08:58 PM).
import { AllTaxRulesConcepts, TaxRulesConceptType } from "../../language/gen/";
import { TaxRulesNamespace } from "./TaxRulesNamespace";
import { PiScoper, PiNamedElement } from "@projectit/core";

export class TaxRulesScoper implements PiScoper {
    isInScope(modelElement: AllTaxRulesConcepts, name: string, metatype?: TaxRulesConceptType, excludeSurrounding?: boolean): boolean {
        if (this.getFromVisibleElements(modelElement, name, metatype, excludeSurrounding) !== null) {
            return true;
        } else {
            return false;
        }
    }

    getVisibleElements(modelelement: AllTaxRulesConcepts, metatype?: TaxRulesConceptType, excludeSurrounding?: boolean): PiNamedElement[] {
        let result: PiNamedElement[] = [];
        if (modelelement == null) {
            // TODO error mess console.log("getVisibleElements: modelelement is null");
            return null;
        }
        let ns = new TaxRulesNamespace(modelelement);
        result = ns.getVisibleElements(metatype, excludeSurrounding); // true means that we are excluding names from parent namespaces
        return result;
    }

    getFromVisibleElements(
        modelelement: AllTaxRulesConcepts,
        name: string,
        metatype?: TaxRulesConceptType,
        excludeSurrounding?: boolean
    ): PiNamedElement {
        let vis = this.getVisibleElements(modelelement, metatype, excludeSurrounding);
        if (vis !== null) {
            for (let e of vis) {
                let n: string = e.name;
                if (name === n) {
                    return e;
                }
            }
        }
        return null;
    }

    getVisibleNames(modelelement: AllTaxRulesConcepts, metatype?: TaxRulesConceptType, excludeSurrounding?: boolean): string[] {
        let result: string[] = [];
        let vis = this.getVisibleElements(modelelement, metatype, excludeSurrounding);
        for (let e of vis) {
            let n: string = e.name;
            result.push(n);
        }
        return result;
    }
}
