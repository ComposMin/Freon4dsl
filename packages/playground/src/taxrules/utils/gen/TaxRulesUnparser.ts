// Generated by the ProjectIt Language Generator (4/1/2020, 10:52:09 AM).
import { AllTaxRulesConcepts } from "../../language/gen/";
import {
    RevenueService,
    TaxRuleSet,
    TaxPayer,
    IncomePart,
    Money,
    TaxID,
    TaxRule,
    RuleParameter,
    PercentageExpression,
    MoneyLiteralExp,
    TaxRuleCall,
    Expression,
    PlaceholderExpression,
    LiteralExpression,
    StringLiteralExpression,
    NumberLiteralExpression,
    BooleanLiteralExpression,
    AbsExpression,
    BinaryExpression,
    MultiplyExpression,
    PlusExpression,
    DivideExpression,
    AndExpression,
    OrExpression,
    ComparisonExpression,
    LessThenExpression,
    GreaterThenExpression,
    EqualsExpression,
    IfExpression
} from "../../language/gen/";
// TODO change import to @project/core
import { PiLogger } from "../../../../../core/src/util/PiLogging";

const LOGGER = new PiLogger("TaxRulesUnparser");

// For now, we generate an empty template class as unparser.
// When the editor definition language is finished, the .edit file
// will be used to generate the bodies of the functions below.
export class TaxRulesUnparser {
    public unparse(modelelement: AllTaxRulesConcepts): string {
        if (modelelement instanceof IfExpression) {
            return this.unparseIfExpression(modelelement);
        }
        if (modelelement instanceof EqualsExpression) {
            return this.unparseEqualsExpression(modelelement);
        }
        if (modelelement instanceof GreaterThenExpression) {
            return this.unparseGreaterThenExpression(modelelement);
        }
        if (modelelement instanceof LessThenExpression) {
            return this.unparseLessThenExpression(modelelement);
        }
        if (modelelement instanceof ComparisonExpression) {
            return this.unparseComparisonExpression(modelelement);
        }
        if (modelelement instanceof OrExpression) {
            return this.unparseOrExpression(modelelement);
        }
        if (modelelement instanceof AndExpression) {
            return this.unparseAndExpression(modelelement);
        }
        if (modelelement instanceof DivideExpression) {
            return this.unparseDivideExpression(modelelement);
        }
        if (modelelement instanceof PlusExpression) {
            return this.unparsePlusExpression(modelelement);
        }
        if (modelelement instanceof MultiplyExpression) {
            return this.unparseMultiplyExpression(modelelement);
        }
        if (modelelement instanceof BinaryExpression) {
            return this.unparseBinaryExpression(modelelement);
        }
        if (modelelement instanceof AbsExpression) {
            return this.unparseAbsExpression(modelelement);
        }
        if (modelelement instanceof BooleanLiteralExpression) {
            return this.unparseBooleanLiteralExpression(modelelement);
        }
        if (modelelement instanceof NumberLiteralExpression) {
            return this.unparseNumberLiteralExpression(modelelement);
        }
        if (modelelement instanceof StringLiteralExpression) {
            return this.unparseStringLiteralExpression(modelelement);
        }
        if (modelelement instanceof LiteralExpression) {
            return this.unparseLiteralExpression(modelelement);
        }
        if (modelelement instanceof MoneyLiteralExp) {
            return this.unparseMoneyLiteralExp(modelelement);
        }
        if (modelelement instanceof PercentageExpression) {
            return this.unparsePercentageExpression(modelelement);
        }
        if (modelelement instanceof IfExpression) {
            return this.unparseIfExpression(modelelement);
        }
        if (modelelement instanceof EqualsExpression) {
            return this.unparseEqualsExpression(modelelement);
        }
        if (modelelement instanceof GreaterThenExpression) {
            return this.unparseGreaterThenExpression(modelelement);
        }
        if (modelelement instanceof LessThenExpression) {
            return this.unparseLessThenExpression(modelelement);
        }
        if (modelelement instanceof ComparisonExpression) {
            return this.unparseComparisonExpression(modelelement);
        }
        if (modelelement instanceof OrExpression) {
            return this.unparseOrExpression(modelelement);
        }
        if (modelelement instanceof AndExpression) {
            return this.unparseAndExpression(modelelement);
        }
        if (modelelement instanceof DivideExpression) {
            return this.unparseDivideExpression(modelelement);
        }
        if (modelelement instanceof PlusExpression) {
            return this.unparsePlusExpression(modelelement);
        }
        if (modelelement instanceof MultiplyExpression) {
            return this.unparseMultiplyExpression(modelelement);
        }
        if (modelelement instanceof BinaryExpression) {
            return this.unparseBinaryExpression(modelelement);
        }
        if (modelelement instanceof AbsExpression) {
            return this.unparseAbsExpression(modelelement);
        }
        if (modelelement instanceof BooleanLiteralExpression) {
            return this.unparseBooleanLiteralExpression(modelelement);
        }
        if (modelelement instanceof NumberLiteralExpression) {
            return this.unparseNumberLiteralExpression(modelelement);
        }
        if (modelelement instanceof StringLiteralExpression) {
            return this.unparseStringLiteralExpression(modelelement);
        }
        if (modelelement instanceof LiteralExpression) {
            return this.unparseLiteralExpression(modelelement);
        }
        if (modelelement instanceof PercentageExpression) {
            return this.unparsePercentageExpression(modelelement);
        }
        if (modelelement instanceof RevenueService) {
            return this.unparseRevenueService(modelelement);
        }
        if (modelelement instanceof TaxRuleSet) {
            return this.unparseTaxRuleSet(modelelement);
        }
        if (modelelement instanceof TaxPayer) {
            return this.unparseTaxPayer(modelelement);
        }
        if (modelelement instanceof IncomePart) {
            return this.unparseIncomePart(modelelement);
        }
        if (modelelement instanceof Money) {
            return this.unparseMoney(modelelement);
        }
        if (modelelement instanceof TaxID) {
            return this.unparseTaxID(modelelement);
        }
        if (modelelement instanceof TaxRule) {
            return this.unparseTaxRule(modelelement);
        }
        if (modelelement instanceof RuleParameter) {
            return this.unparseRuleParameter(modelelement);
        }
        if (modelelement instanceof TaxRuleCall) {
            return this.unparseTaxRuleCall(modelelement);
        }
        if (modelelement instanceof Expression) {
            return this.unparseExpression(modelelement);
        }
        if (modelelement instanceof PlaceholderExpression) {
            return this.unparsePlaceholderExpression(modelelement);
        }
    }

    private unparseRevenueService(modelelement: RevenueService): string {
        return "";
    }

    private unparseTaxRuleSet(modelelement: TaxRuleSet): string {
        return "";
    }

    private unparseTaxPayer(modelelement: TaxPayer): string {
        return "";
    }

    private unparseIncomePart(modelelement: IncomePart): string {
        return "";
    }

    private unparseMoney(modelelement: Money): string {
        return "";
    }

    private unparseTaxID(modelelement: TaxID): string {
        return "";
    }

    private unparseTaxRule(modelelement: TaxRule): string {
        return "";
    }

    private unparseRuleParameter(modelelement: RuleParameter): string {
        return "";
    }

    private unparsePercentageExpression(modelelement: PercentageExpression): string {
        return "";
    }

    private unparseMoneyLiteralExp(modelelement: MoneyLiteralExp): string {
        return "";
    }

    private unparseTaxRuleCall(modelelement: TaxRuleCall): string {
        return "";
    }

    private unparseExpression(modelelement: Expression): string {
        return "";
    }

    private unparsePlaceholderExpression(modelelement: PlaceholderExpression): string {
        return "";
    }

    private unparseLiteralExpression(modelelement: LiteralExpression): string {
        return "";
    }

    private unparseStringLiteralExpression(modelelement: StringLiteralExpression): string {
        return "";
    }

    private unparseNumberLiteralExpression(modelelement: NumberLiteralExpression): string {
        return "";
    }

    private unparseBooleanLiteralExpression(modelelement: BooleanLiteralExpression): string {
        return "";
    }

    private unparseAbsExpression(modelelement: AbsExpression): string {
        return "";
    }

    private unparseBinaryExpression(modelelement: BinaryExpression): string {
        return "";
    }

    private unparseMultiplyExpression(modelelement: MultiplyExpression): string {
        return "";
    }

    private unparsePlusExpression(modelelement: PlusExpression): string {
        return "";
    }

    private unparseDivideExpression(modelelement: DivideExpression): string {
        return "";
    }

    private unparseAndExpression(modelelement: AndExpression): string {
        return "";
    }

    private unparseOrExpression(modelelement: OrExpression): string {
        return "";
    }

    private unparseComparisonExpression(modelelement: ComparisonExpression): string {
        return "";
    }

    private unparseLessThenExpression(modelelement: LessThenExpression): string {
        return "";
    }

    private unparseGreaterThenExpression(modelelement: GreaterThenExpression): string {
        return "";
    }

    private unparseEqualsExpression(modelelement: EqualsExpression): string {
        return "";
    }

    private unparseIfExpression(modelelement: IfExpression): string {
        return "";
    }
}
