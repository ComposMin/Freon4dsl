// Generated by the ProjectIt Language Generator (4/1/2020, 10:52:09 AM).
import {
    AbsExpression,
    AndExpression,
    BinaryExpression,
    BooleanLiteralExpression,
    ComparisonExpression,
    DivideExpression,
    EqualsExpression,
    Expression,
    GreaterThenExpression,
    IfExpression,
    IncomePart,
    IncomeType,
    LessThenExpression,
    LiteralExpression,
    Money,
    MoneyLiteralExp,
    MultiplyExpression,
    NumberLiteralExpression,
    OrExpression,
    PercentageExpression,
    PlaceholderExpression,
    PlusExpression,
    RevenueService,
    RuleParameter,
    StringLiteralExpression,
    TaxID,
    TaxPayer,
    TaxPayerType,
    TaxRule,
    TaxRuleCall,
    TaxRuleSet,
    PiElementReference
} from "../../language/gen/";

export class TaxRulesCreator {
    public createRevenueService(rules: TaxRuleSet, payers: TaxPayer): RevenueService {
        let _result = new RevenueService();

        _result.rules = rules;
        if (payers !== null) _result.payers.push(payers);

        return _result;
    }
    public createTaxRuleSet(year: number, taxrules: TaxRule): TaxRuleSet {
        let _result = new TaxRuleSet();
        _result.year = year;

        if (taxrules !== null) _result.taxrules.push(taxrules);

        return _result;
    }
    public createTaxPayer(
        name: string,
        address: string,
        payerType: TaxPayerType,
        taxId: TaxID,
        incomeParts: IncomePart,
        totalIncome: Money,
        totalTaxes: Money
    ): TaxPayer {
        let _result = new TaxPayer();
        _result.name = name;
        _result.address = address;
        _result.payerType = payerType;
        _result.taxId = taxId;
        if (incomeParts !== null) _result.incomeParts.push(incomeParts);
        _result.totalIncome = totalIncome;
        _result.totalTaxes = totalTaxes;

        return _result;
    }
    public createIncomePart(incomeType: IncomeType, deduction: Money, amount: Money, source: TaxPayer): IncomePart {
        let _result = new IncomePart();

        _result.incomeType = incomeType;
        _result.deduction = deduction;
        _result.amount = amount;
        _result.source = new PiElementReference(source, "TaxPayer");
        return _result;
    }
    public createMoney(amount: number): Money {
        let _result = new Money();
        _result.amount = amount;

        return _result;
    }
    public createTaxID(id: number): TaxID {
        let _result = new TaxID();
        _result.id = id;

        return _result;
    }
    public createTaxRule(name: string, expression: Expression): TaxRule {
        let _result = new TaxRule();
        _result.name = name;

        _result.expression = expression;

        return _result;
    }
    public createRuleParameter(name: string, type: IncomePart): RuleParameter {
        let _result = new RuleParameter();
        _result.name = name;

        _result.type = type;

        return _result;
    }
    public createPercentageExpression(inner: Expression): PercentageExpression {
        let _result = new PercentageExpression();

        _result.inner = inner;

        return _result;
    }
    public createMoneyLiteralExp(value: string): MoneyLiteralExp {
        let _result = new MoneyLiteralExp();
        _result.value = value;

        return _result;
    }
    public createTaxRuleCall(functionDefinition: TaxRule): TaxRuleCall {
        let _result = new TaxRuleCall();

        _result.functionDefinition = new PiElementReference(functionDefinition, "TaxRule");
        return _result;
    }

    public createPlaceholderExpression(): PlaceholderExpression {
        let _result = new PlaceholderExpression();

        return _result;
    }

    public createStringLiteralExpression(value: string): StringLiteralExpression {
        let _result = new StringLiteralExpression();
        _result.value = value;

        return _result;
    }
    public createNumberLiteralExpression(value: string): NumberLiteralExpression {
        let _result = new NumberLiteralExpression();
        _result.value = value;

        return _result;
    }
    public createBooleanLiteralExpression(value: string): BooleanLiteralExpression {
        let _result = new BooleanLiteralExpression();
        _result.value = value;

        return _result;
    }
    public createAbsExpression(expr: Expression): AbsExpression {
        let _result = new AbsExpression();

        _result.expr = expr;

        return _result;
    }

    public createMultiplyExpression(left: Expression, right: Expression): MultiplyExpression {
        let _result = new MultiplyExpression();

        _result.left = left;
        _result.right = right;

        return _result;
    }
    public createPlusExpression(left: Expression, right: Expression): PlusExpression {
        let _result = new PlusExpression();

        _result.left = left;
        _result.right = right;

        return _result;
    }
    public createDivideExpression(left: Expression, right: Expression): DivideExpression {
        let _result = new DivideExpression();

        _result.left = left;
        _result.right = right;

        return _result;
    }
    public createAndExpression(left: Expression, right: Expression): AndExpression {
        let _result = new AndExpression();

        _result.left = left;
        _result.right = right;

        return _result;
    }
    public createOrExpression(left: Expression, right: Expression): OrExpression {
        let _result = new OrExpression();

        _result.left = left;
        _result.right = right;

        return _result;
    }

    public createLessThenExpression(left: Expression, right: Expression): LessThenExpression {
        let _result = new LessThenExpression();

        _result.left = left;
        _result.right = right;

        return _result;
    }
    public createGreaterThenExpression(left: Expression, right: Expression): GreaterThenExpression {
        let _result = new GreaterThenExpression();

        _result.left = left;
        _result.right = right;

        return _result;
    }
    public createEqualsExpression(left: Expression, right: Expression): EqualsExpression {
        let _result = new EqualsExpression();

        _result.left = left;
        _result.right = right;

        return _result;
    }
    public createIfExpression(condition: Expression, whenTrue: Expression, whenFalse: Expression): IfExpression {
        let _result = new IfExpression();

        _result.condition = condition;
        _result.whenTrue = whenTrue;
        _result.whenFalse = whenFalse;

        return _result;
    }
}
