// Generated by the ProjectIt Language Generator.
import * as uuid from "uuid";
import { TaxRulesConceptType } from "./TaxRules";
import { model, MobxModelElementImpl } from "@projectit/core";
import { PiElement, PiExpression, PiBinaryExpression } from "@projectit/core";

export class TaxPayerType extends MobxModelElementImpl implements PiElement {
    readonly $typename: TaxRulesConceptType = "TaxPayerType";
    $id: string;

    constructor(name: string, id?: string) {
        super();
        this.name = name;
        if (!!id) {
            this.$id = id;
        } else {
            this.$id = uuid.v4();
        }
    }

    static Company: TaxPayerType = TaxPayerType.fromString("Company");
    static NGO: TaxPayerType = TaxPayerType.fromString("NGO");
    static Goverment: TaxPayerType = TaxPayerType.fromString("Goverment");
    static Person: TaxPayerType = TaxPayerType.fromString("Person");
    static $piANY: TaxPayerType = TaxPayerType.fromString("$piANY");

    static values = [TaxPayerType.Company, TaxPayerType.NGO, TaxPayerType.Goverment, TaxPayerType.Person];

    public readonly name: string;

    public asString(): string {
        return this.name;
    }

    static fromString(v: string): TaxPayerType {
        switch (v) {
            case "Company":
                if (this.Company !== null) {
                    return new TaxPayerType("Company");
                } else {
                    return TaxPayerType.Company;
                }
            case "NGO":
                if (this.NGO !== null) {
                    return new TaxPayerType("NGO");
                } else {
                    return TaxPayerType.NGO;
                }
            case "Goverment":
                if (this.Goverment !== null) {
                    return new TaxPayerType("Goverment");
                } else {
                    return TaxPayerType.Goverment;
                }
            case "Person":
                if (this.Person !== null) {
                    return new TaxPayerType("Person");
                } else {
                    return TaxPayerType.Person;
                }
            default:
                if (this.$piANY !== null) {
                    return new TaxPayerType("$piANY");
                } else {
                    return TaxPayerType.$piANY;
                }
        }
    }

    piLanguageConcept(): TaxRulesConceptType {
        return this.$typename;
    }

    piId(): string {
        return this.$id;
    }

    piIsExpression(): boolean {
        return false;
    }

    piIsBinaryExpression(): boolean {
        return false;
    }
}
