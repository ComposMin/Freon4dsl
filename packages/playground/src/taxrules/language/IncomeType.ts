// Generated by the ProjectIt Language Generator.
import * as uuid from "uuid";
import { TaxRulesConceptType } from "./TaxRules";
import { model, MobxModelElementImpl } from "@projectit/core";
import { PiElement, PiExpression, PiBinaryExpression } from "@projectit/core";

export class IncomeType extends MobxModelElementImpl implements PiElement {
    readonly $typename: TaxRulesConceptType = "IncomeType";
    $id: string;

    constructor(name: string, id?: string) {
        super();
        this.name = name;
        if (!!id) {
            this.$id = id;
        } else {
            this.$id = uuid.v4();
        }
    }

    static Salary: IncomeType = IncomeType.fromString("Salary");
    static Royalties: IncomeType = IncomeType.fromString("Royalties");
    static Gift: IncomeType = IncomeType.fromString("Gift");
    static $piANY: IncomeType = IncomeType.fromString("$piANY");

    static values = [IncomeType.Salary, IncomeType.Royalties, IncomeType.Gift];

    public readonly name: string;

    public asString(): string {
        return this.name;
    }

    static fromString(v: string): IncomeType {
        switch (v) {
            case "Salary":
                if (this.Salary !== null) {
                    return new IncomeType("Salary");
                } else {
                    return IncomeType.Salary;
                }
            case "Royalties":
                if (this.Royalties !== null) {
                    return new IncomeType("Royalties");
                } else {
                    return IncomeType.Royalties;
                }
            case "Gift":
                if (this.Gift !== null) {
                    return new IncomeType("Gift");
                } else {
                    return IncomeType.Gift;
                }
            default:
                if (this.$piANY !== null) {
                    return new IncomeType("$piANY");
                } else {
                    return IncomeType.$piANY;
                }
        }
    }

    piLanguageConcept(): TaxRulesConceptType {
        return this.$typename;
    }

    piId(): string {
        return this.$id;
    }

    piIsExpression(): boolean {
        return false;
    }

    piIsBinaryExpression(): boolean {
        return false;
    }
}
