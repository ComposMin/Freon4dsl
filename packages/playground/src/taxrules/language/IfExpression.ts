// Generated by the ProjectIt Language Generator.
import * as uuid from "uuid";
import { PiElement, PiNamedElement, PiExpression, PiBinaryExpression } from "@projectit/core";
import { model, observablepart } from "@projectit/core";
import { PiElementReference } from "./PiElementReference";
import { TaxRulesConceptType } from "./TaxRules";
import { Expression } from "./Expression";
import { IncomeType } from "./IncomeType";
import { TaxPayerType } from "./TaxPayerType";
import { PlaceholderExpression } from "./PlaceholderExpression";

@model
export class IfExpression extends Expression implements PiExpression {
    readonly $typename: TaxRulesConceptType = "IfExpression";

    constructor(id?: string) {
        super(id);
    }

    @observablepart condition: Expression = new PlaceholderExpression();

    @observablepart whenTrue: Expression = new PlaceholderExpression();

    @observablepart whenFalse: Expression = new PlaceholderExpression();

    piLanguageConcept(): TaxRulesConceptType {
        return this.$typename;
    }

    piIsExpression(): boolean {
        return true;
    }

    piIsBinaryExpression(): boolean {
        return false;
    }

    piIsExpressionPlaceHolder(): boolean {
        return false;
    }
}
