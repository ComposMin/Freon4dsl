// Generated by the ProjectIt Language Generator.
import { observable } from "mobx";
import * as uuid from "uuid";
import { PiElement, PiNamedElement, PiExpression, PiBinaryExpression } from "@projectit/core";
import { model, MobxModelElementImpl, observablepart } from "@projectit/core";
import { PiElementReference } from "./PiElementReference";
import { TaxRulesConceptType } from "./TaxRules";
import { Money } from "./Money";
import { TaxPayer } from "./TaxPayer";
import { IncomeType } from "./IncomeType";
import { TaxPayerType } from "./TaxPayerType";
import { PlaceholderExpression } from "./PlaceholderExpression";
import { Expression } from "./Expression";

@model
export class IncomePart extends MobxModelElementImpl implements PiElement {
    readonly $typename: TaxRulesConceptType = "IncomePart";
    $id: string;

    constructor(id?: string) {
        super();

        if (!!id) {
            this.$id = id;
        } else {
            this.$id = uuid.v4();
        }
    }

    @observable incomeType: IncomeType = IncomeType.$piANY;

    @observablepart deduction: Money;

    @observablepart amount: Money;

    @observablepart source: PiElementReference<TaxPayer>;

    piLanguageConcept(): TaxRulesConceptType {
        return this.$typename;
    }

    piId(): string {
        return this.$id;
    }

    piIsExpression(): boolean {
        return false;
    }

    piIsBinaryExpression(): boolean {
        return false;
    }
}
