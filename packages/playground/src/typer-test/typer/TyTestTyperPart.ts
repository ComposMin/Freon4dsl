// Generated by the ProjectIt Language Generator.
import { PiTyperPart } from "@projectit/core";
import { TyTestEveryConcept } from "../language/gen";
import { TyTestTyper } from "./gen/TyTestTyper";

export class TyTestTyperPart implements PiTyperPart {
    mainTyper: TyTestTyper;
    /**
     * See interface
     */
    public inferType(modelelement: TyTestEveryConcept): TyTestEveryConcept | null {
        // if (modelelement.piLanguageConcept() === "SimpleType" || modelelement.piLanguageConcept() === "UnitOfMeasurement" || modelelement.piLanguageConcept() === "GenericType") {
        //     const writer = TyTestEnvironment.getInstance().writer;
        //     console.log("TypeDeclaration in TyperPart "+ writer.writeToString(modelelement))
        // }
        if (this.mainTyper.isType(modelelement)) {
            return modelelement;
        }
        return null;
    }
    /**
     * See interface
     */
    public equalsType(elem1: TyTestEveryConcept, elem2: TyTestEveryConcept): boolean | null {
        // const writer = TyTestEnvironment.getInstance().writer;
        // console.log("TyTyperPart.equalsType elem1: " + writer.writeToString(elem1) + ", elem2: " + writer.writeToString(elem2));
        let $type1: TyTestEveryConcept = this.mainTyper.inferType(elem1);
        let $type2: TyTestEveryConcept = this.mainTyper.inferType(elem2);
        // console.log("TyTyperPart.equalsType type1: " + writer.writeToString($type1) + ", type2: " + writer.writeToString($type2));
        // console.log($type1.piId() + " " + $type2.piId())
        if ($type1.piLanguageConcept() !== $type2.piLanguageConcept()) {
            return false;
        }
        return $type1 === $type2;
    }
    /**
     * See interface
     */
    public conformsTo(elem1: TyTestEveryConcept, elem2: TyTestEveryConcept): boolean | null {
        return true;
    }
    /**
     * See interface
     */
    public conformList(typelist1: TyTestEveryConcept[], typelist2: TyTestEveryConcept[]): boolean | null {
        return true;
    }
    /**
     * See interface
     */
    public isType(elem: TyTestEveryConcept): boolean | null {
        if (elem.piLanguageConcept() === "PredefinedType") {
            return true;
        } else if (elem.piLanguageConcept() === "NamedType") {
            return true;
        } else if (elem.piLanguageConcept() === "TypeDeclaration") {
            return true;
        } else if (elem.piLanguageConcept() === "SimpleType") {
            return true;
        } else if (elem.piLanguageConcept() === "GenericType") {
            return true;
        } else if (elem.piLanguageConcept() === "UnitOfMeasurement") {
            return true;
        }
        return false;
    }
}
