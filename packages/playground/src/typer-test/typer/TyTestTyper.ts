// Generated by the ProjectIt Language Generator.
import { PiTyper } from "@projectit/core";
import { TyTestEveryConcept } from "../language/gen";
import { projectitConfiguration } from "../projectit/ProjectitConfiguration";
import { TyTestTyperPart } from "./TyTestTyperPart";

/**
 * Class TyTestTyper implements the typer generated from, if present, the typer definition,
 * otherwise this class implements the default typer.
 */
export class TyTestTyper implements PiTyper {
    private generatedTyper: TyTestTyperPart;

    constructor() {
        this.generatedTyper = new TyTestTyperPart();
        // this.generatedTyper.mainTyper = this;
    }

    /**
     * See interface
     */
    public equalsType(elem1: TyTestEveryConcept, elem2: TyTestEveryConcept): boolean {
        for (const typer of projectitConfiguration.customTypers) {
            typer.mainTyper = this;
            let result: boolean = typer.equalsType(elem1, elem2);
            if (result !== null) {
                return result;
            }
        }
        // no result from custom typers => use the generated typer
        return this.generatedTyper.equalsType(elem1, elem2);
    }

    /**
     * See interface
     */
    public inferType(modelelement: TyTestEveryConcept): TyTestEveryConcept {
        for (const typer of projectitConfiguration.customTypers) {
            typer.mainTyper = this;
            let result: TyTestEveryConcept = typer.inferType(modelelement) as TyTestEveryConcept;
            if (result !== null) {
                return result;
            }
        }
        // no result from custom typers => use the generated typer
        return this.generatedTyper.inferType(modelelement);
    }

    /**
     * See interface
     */
    public conformsTo(elem1: TyTestEveryConcept, elem2: TyTestEveryConcept): boolean {
        for (const typer of projectitConfiguration.customTypers) {
            typer.mainTyper = this;
            let result: boolean = typer.conformsTo(elem1, elem2);
            if (result !== null) {
                return result;
            }
        }
        // no result from custom typers => use the generated typer
        return this.generatedTyper.conformsTo(elem1, elem2);
    }

    /**
     * See interface
     */
    public conformList(typelist1: TyTestEveryConcept[], typelist2: TyTestEveryConcept[]): boolean {
        for (const typer of projectitConfiguration.customTypers) {
            typer.mainTyper = this;
            let result: boolean = typer.conformList(typelist1, typelist2);
            if (result !== null) {
                return result;
            }
        }
        // no result from custom typers => use the generated typer
        return this.generatedTyper.conformList(typelist1, typelist2);
    }

    /**
     * See interface
     */
    public isType(elem: TyTestEveryConcept): boolean {
        // entries for all types marked as @isType
        for (const typer of projectitConfiguration.customTypers) {
            typer.mainTyper = this;
            let result: boolean = typer.isType(elem);
            if (result) {
                return result;
            }
        }
        // no result from custom typers => use the generated typer
        return this.generatedTyper.isType(elem);
    }
}
