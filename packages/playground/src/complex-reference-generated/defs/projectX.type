typer

// What are types?
istype { TopType }

// Which concepts have a type?
hastype { Exp }

// What are the top and bottom types?
anytype {
    conformsto PredefinedType:ANY; // PredefinedType:ANY is the least specific type
}

PredefinedType {
    PredefinedType:NULL conformsto anytype; // PredefinedType:NULL is the most specific type
    NUMBER conformsto STRING;
}

// Which type does an expression have?
NumberLiteral {
    infertype PredefinedType:NUMBER;
}

StringLiteral {
    infertype PredefinedType:STRING;
}

BooleanLiteral {
    infertype PredefinedType:BOOLEAN;
}

NamedExp {
    infertype self.myType;
}

PlusExp {
    infertype commonSuperType(self.left, self.right);
}

UnitLiteral {
    // 62 kilogram, or 112 miles
    infertype UnitOfMeasurement {
    // the following gives error message: baseType: typeof(self.inner),
        baseType: PredefinedType:NUMBER,
        unit: self.unit
    };
}

GenericLiteral {
    // Set{ 12, 14, 16, 18 }
    infertype GenericType {
        baseType: typeof(self.content),
        kind: self.kind
    };
}

// Which types are 'equal' to each other?
NamedType {
    equalsto aa:NamedType where {
            aa.name equalsto self.name;
        };
}

GenericType {
    equalsto x:GenericType where {
            x.baseType equalsto self.baseType;
            x.kind equalsto self.kind;
        };
    conformsto y:GenericType where {
            // both conditions must be true
            self.baseType conformsto y.baseType;
            self.kind conformsto y.kind;
        };
}

GenericKind {
    Set conformsto Collection;
    Sequence conformsto Collection;
    Bag conformsto Collection;
}

UnitOfMeasurement {
    equalsto aap:UnitOfMeasurement where {
            aap.baseType equalsto self.baseType;
            aap.unit equalsto self.unit;
        };
    conformsto rr:UnitOfMeasurement where {
            self.baseType conformsto rr.baseType;
            self.unit equalsto rr.unit;
        };
}
