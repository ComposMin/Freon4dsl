// Generated by the ProjectIt Language Generator.
import {
    PiEditor,
    PiEnvironment,
    PiReader,
    PiScoper,
    PiTyper,
    PiValidator,
    PiStdlib,
    PiWriter,
    FreonInterpreter,
    LanguageEnvironment,
    NewCompositeProjection
} from "@projectit/core";
import { SimpleProjectActions, initializeEditorDef } from "../editor/gen";
import { SimpleProjectScoper } from "../scoper/gen/SimpleProjectScoper";
import { initializeScoperDef } from "../scoper/gen/SimpleProjectScoperDef";
import { SimpleProjectTyper } from "../typer/gen/SimpleProjectTyper";
import { SimpleProjectValidator } from "../validator/gen/SimpleProjectValidator";
import { SimpleProjectStdlib } from "../stdlib/gen/SimpleProjectStdlib";
import { SimpleProjectModelUnitWriter } from "../writer/gen/SimpleProjectModelUnitWriter";
import { SimpleProjectModelUnitReader } from "../reader/gen/SimpleProjectModelUnitReader";
import { MainSimpleProjectInterpreter } from "../interpreter/MainSimpleProjectInterpreter";
import { SimpleModel, SimplePart, initializeLanguage } from "../language/gen";
import { SimpleProjectBoxProviderCache } from "../editor/gen/SimpleProjectBoxProviderCache";

/**
 * Class SimpleProjectEnvironment provides the link between all parts of the language environment.
 * It holds the currently used editor, scoper, typer, etc, thus providing an entry point for
 * for instance, the editor to find the right scoper, or for the validator to find the typer
 * to use.
 * This class uses the singleton pattern to ensure that only one instance of the class is present.
 */
export class SimpleProjectEnvironment implements PiEnvironment {
    private static environment: PiEnvironment; // the only instance of this class

    /**
     * This method implements the singleton pattern
     */
    public static getInstance(): PiEnvironment {
        if (this.environment === undefined || this.environment === null) {
            this.environment = new SimpleProjectEnvironment();
            LanguageEnvironment.setInstance(this.environment);
        }
        return this.environment;
    }

    /**
     * A private constructor, as demanded by the singleton pattern.
     */
    private constructor() {
        const actions = new SimpleProjectActions();
        // changed from here!
        // const rootProjection = new PiCompositeProjection("root");
        // initializeProjections(rootProjection);
        // this.editor = new PiEditor(rootProjection, actions);
        const myComposite = new NewCompositeProjection();
        myComposite.rootProvider = SimpleProjectBoxProviderCache.getInstance().getConstructor('SimplePart')();
        this.editor = new PiEditor(myComposite, actions);
        // this.editor.rootElement = null; // setting rootElement causes a getBox(), which is complete unnecessary
        // end changed
        this.editor.environment = this;
        initializeLanguage();
        initializeEditorDef();
        initializeScoperDef();
    }

    /**
     * Returns a new model with name 'modelName'.
     *
     * @param modelName
     */
    newModel(modelName: string): SimpleModel {
        const model = new SimpleModel();
        model.name = modelName;
        return model;
    }

    // the parts of the language environment
    editor: PiEditor;
    scoper: PiScoper = new SimpleProjectScoper();
    typer: PiTyper = new SimpleProjectTyper();
    stdlib: PiStdlib = SimpleProjectStdlib.getInstance();
    validator: PiValidator = new SimpleProjectValidator();
    writer: PiWriter = new SimpleProjectModelUnitWriter();
    reader: PiReader = new SimpleProjectModelUnitReader();
    interpreter: FreonInterpreter = new MainSimpleProjectInterpreter();
    languageName: string = "SimpleProject";
    // the type names of all units
    unitNames: string[] = ["SimplePart"];
    fileExtensions: Map<string, string> = new Map([["SimplePart", "sim"]]);
}
