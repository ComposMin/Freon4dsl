// Generated by the ProjectIt Language Generator.
import { PiError, PiTyper } from "@projectit/core";
import {
    DemoModel,
    DemoEntity,
    DemoAttribute,
    DemoFunction,
    DemoVariable,
    DemoExpression,
    DemoPlaceholderExpression,
    DemoLiteralExpression,
    DemoStringLiteralExpression,
    DemoNumberLiteralExpression,
    DemoBooleanLiteralExpression,
    DemoAbsExpression,
    DemoBinaryExpression,
    DemoMultiplyExpression,
    DemoPlusExpression,
    DemoDivideExpression,
    DemoAndExpression,
    DemoOrExpression,
    DemoComparisonExpression,
    DemoLessThenExpression,
    DemoGreaterThenExpression,
    DemoEqualsExpression,
    DemoFunctionCallExpression,
    DemoIfExpression,
    DemoVariableRef,
    DemoAttributeType,
    DemoType
} from "../language";
import { DemoWorker } from "../../demo/utils/gen/DemoWorker";

export class DemoStringMaker implements DemoWorker {
    resultString: string = "";

    execAfterDemoModel(modelelement: DemoModel) {
        this.resultString =  this.resultString.concat("\n}\n");
    }
    execAfterDemoEntity(modelelement: DemoEntity) {
        this.resultString =  this.resultString.concat("\n}\n");
    }
    execAfterDemoAttribute(modelelement: DemoAttribute) {
    }
    execAfterDemoFunction(modelelement: DemoFunction) {
        this.resultString =  this.resultString.concat(")");
    }
    execAfterDemoVariable(modelelement: DemoVariable) {
    }
    execAfterDemoExpression(modelelement: DemoExpression) {
    }
    execAfterDemoPlaceholderExpression(modelelement: DemoPlaceholderExpression) {
    }
    execAfterDemoLiteralExpression(modelelement: DemoLiteralExpression) {
    }
    execAfterDemoStringLiteralExpression(modelelement: DemoStringLiteralExpression) {
    }
    execAfterDemoNumberLiteralExpression(modelelement: DemoNumberLiteralExpression) {
    }
    execAfterDemoBooleanLiteralExpression(modelelement: DemoBooleanLiteralExpression) {
    }
    execAfterDemoAbsExpression(modelelement: DemoAbsExpression) {
    }
    execAfterDemoBinaryExpression(modelelement: DemoBinaryExpression) {
    }
    execAfterDemoMultiplyExpression(modelelement: DemoMultiplyExpression) {
    }
    execAfterDemoPlusExpression(modelelement: DemoPlusExpression) {
    }
    execAfterDemoDivideExpression(modelelement: DemoDivideExpression) {
    }
    execAfterDemoAndExpression(modelelement: DemoAndExpression) {
    }
    execAfterDemoOrExpression(modelelement: DemoOrExpression) {
    }
    execAfterDemoComparisonExpression(modelelement: DemoComparisonExpression) {
    }
    execAfterDemoLessThenExpression(modelelement: DemoLessThenExpression) {
    }
    execAfterDemoGreaterThenExpression(modelelement: DemoGreaterThenExpression) {
    }
    execAfterDemoEqualsExpression(modelelement: DemoEqualsExpression) {
    }
    execAfterDemoFunctionCallExpression(modelelement: DemoFunctionCallExpression) {
    }
    execAfterDemoIfExpression(modelelement: DemoIfExpression) {
    }
    execAfterDemoVariableRef(modelelement: DemoVariableRef) {
    }

    public execBeforeDemoMultiplyExpression(modelelement: DemoMultiplyExpression) {
        // console.log("execBeforeDemoMultiplyExpression " + this.resultString);
        this.execBeforeDemoBinaryExpression(modelelement);
    }

    public execBeforeDemoPlusExpression(modelelement: DemoPlusExpression) {
        this.execBeforeDemoBinaryExpression(modelelement);
    }

    public execBeforeDemoDivideExpression(modelelement: DemoDivideExpression) {
        this.execBeforeDemoBinaryExpression(modelelement);
    }

    public execBeforeDemoAndExpression(modelelement: DemoAndExpression) {
        this.execBeforeDemoBinaryExpression(modelelement);
    }

    public execBeforeDemoOrExpression(modelelement: DemoOrExpression) {
        this.execBeforeDemoBinaryExpression(modelelement);
    }

    public execBeforeDemoComparisonExpression(modelelement: DemoComparisonExpression) {
        this.execBeforeDemoBinaryExpression(modelelement);
    }

    public execBeforeDemoLessThenExpression(modelelement: DemoLessThenExpression) {
        this.execBeforeDemoBinaryExpression(modelelement);
    }

    public execBeforeDemoGreaterThenExpression(modelelement: DemoGreaterThenExpression) {
        this.execBeforeDemoBinaryExpression(modelelement);
    }

    public execBeforeDemoEqualsExpression(modelelement: DemoEqualsExpression) {
        this.execBeforeDemoBinaryExpression(modelelement);
    }

    public execBeforeDemoModel(modelelement: DemoModel, includeChildren?: boolean) {
        this.resultString =  this.resultString.concat(modelelement.name + " {");
    }

    public execBeforeDemoEntity(modelelement: DemoEntity, includeChildren?: boolean) {
        this.resultString =  this.resultString.concat(modelelement.name + "{ ");

        // adding the unparse string of children in the model tree
        if (!(includeChildren === undefined) && includeChildren) {
            modelelement.attributes.forEach(p => {
                this.execBeforeDemoAttribute(p, includeChildren);
                this.resultString =  this.resultString.concat(", ");
            });
            modelelement.functions.forEach(p => {
                this.execBeforeDemoFunction(p, includeChildren);
                this.resultString =  this.resultString.concat(", ");
            });
        }
        this.resultString =  this.resultString.concat("\n}");
    }

    public execBeforeDemoAttribute(modelelement: DemoAttribute, includeChildren?: boolean) {
        this.resultString =  this.resultString.concat(modelelement.name);
        if (!(includeChildren === undefined) && includeChildren) {
            this.resultString =  this.resultString.concat( " : " + this.execBeforeDemoAttributeType(modelelement.declaredType));
        }       
    }

    public execBeforeDemoAttributeType(modelelement: DemoAttributeType, includeChildren?: boolean) {
        this.resultString =  this.resultString.concat(modelelement.asString());       
    }

    public execBeforeDemoFunction(modelelement: DemoFunction, includeChildren?: boolean) {
        this.resultString =  this.resultString.concat(modelelement.name);

        // adding the unparse string of children in the model tree
        if (!(includeChildren === undefined) && includeChildren) {
            this.resultString =  this.resultString.concat("( ");
            modelelement.parameters.forEach(p => {
                this.execBeforeDemoVariable(p, includeChildren);
                this.resultString = this.resultString.concat(", ");
            });
            this.resultString =  this.resultString.concat(" )");
            this.resultString =  this.resultString.concat(": " + this.execBeforeDemoAttributeType(modelelement.declaredType, includeChildren));
            this.resultString =  this.resultString.concat( " = " + this.execBeforeDemoExpression(modelelement.expression, includeChildren));
        } else {
            this.resultString =  this.resultString.concat( "()");
        }       
    }

    public execBeforeDemoVariable(modelelement: DemoVariable, includeChildren?: boolean) {
        this.resultString =  this.resultString.concat(modelelement.name);
        if (!(includeChildren === undefined) && includeChildren) {
            this.resultString =  this.resultString.concat(" : " + modelelement.declaredType.name);
        }       
    }

    public execBeforeDemoExpression(modelelement: DemoExpression, includeChildren?: boolean) {
        if (modelelement instanceof DemoPlaceholderExpression) {
            this.execBeforeDemoPlaceholderExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoLiteralExpression) {
            this.execBeforeDemoLiteralExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoAbsExpression) {
            this.execBeforeDemoAbsExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoBinaryExpression) {
            this.execBeforeDemoBinaryExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoFunctionCallExpression) {
            this.execBeforeDemoFunctionCallExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoIfExpression) {
            this.execBeforeDemoIfExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoVariableRef) {
            this.execBeforeDemoVariableRef(modelelement, includeChildren);
        }
    }

    public execBeforeDemoPlaceholderExpression(modelelement: DemoPlaceholderExpression, includeChildren?: boolean) {
        this.resultString = this.resultString.concat("placeHolderExpression");
    }

    public execBeforeDemoLiteralExpression(modelelement: DemoLiteralExpression, includeChildren?: boolean) {
        if (modelelement instanceof DemoStringLiteralExpression) {
            this.execBeforeDemoStringLiteralExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoNumberLiteralExpression) {
            this.execBeforeDemoNumberLiteralExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoBooleanLiteralExpression) {
            this.execBeforeDemoBooleanLiteralExpression(modelelement, includeChildren);
        }
    }

    public execBeforeDemoStringLiteralExpression(modelelement: DemoStringLiteralExpression, includeChildren?: boolean) {
        this.resultString = this.resultString.concat("\"" + modelelement.value + "\"");
    }

    public execBeforeDemoNumberLiteralExpression(modelelement: DemoNumberLiteralExpression, includeChildren?: boolean) {
        this.resultString = this.resultString.concat(modelelement.value);
    }

    public execBeforeDemoBooleanLiteralExpression(modelelement: DemoBooleanLiteralExpression, includeChildren?: boolean) {
        this.resultString = this.resultString.concat(modelelement.value);
    }

    public execBeforeDemoAbsExpression(modelelement: DemoAbsExpression, includeChildren?: boolean) {
        this.resultString = this.resultString.concat("abs( ");
        this.execBeforeDemoExpression(modelelement.expr, includeChildren);
        this.resultString = this.resultString.concat(" )");
    }

    public execBeforeDemoBinaryExpression(modelelement: DemoBinaryExpression, includeChildren?: boolean) {
        this.resultString = this.resultString.concat("( ");
        this.execBeforeDemoExpression(modelelement.left);
        this.resultString = this.resultString.concat(" " + modelelement.piSymbol() + " ");
        this.execBeforeDemoExpression(modelelement.right);
        this.resultString = this.resultString.concat(" )");
    }

    public execBeforeDemoFunctionCallExpression(modelelement: DemoFunctionCallExpression, includeChildren?: boolean) {
        this.resultString = this.resultString.concat(modelelement.functionDefinition.name + "()");
    }

    public execBeforeDemoIfExpression(modelelement: DemoIfExpression, includeChildren?: boolean) {
        this.resultString = this.resultString.concat("if ( ");
        this.execBeforeDemoExpression(modelelement.condition);
        this.resultString = this.resultString.concat(" ) { ");
        this.execBeforeDemoExpression(modelelement.whenTrue, includeChildren);
        this.resultString = this.resultString.concat(" } else { ");
        this.execBeforeDemoExpression(modelelement.whenFalse, includeChildren)
        this.resultString = this.resultString.concat( " }");
    }

    public execBeforeDemoVariableRef(modelelement: DemoVariableRef, includeChildren?: boolean) {
        this.resultString = this.resultString.concat(modelelement.attribute.name);
    }

}
