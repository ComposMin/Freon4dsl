// Generated by the ProjectIt Language Generator.
import {
    DemoAbsExpression,
    DemoAndExpression,
    DemoAttribute,
    DemoAttributeType,
    DemoBinaryExpression,
    DemoBooleanLiteralExpression,
    DemoComparisonExpression,
    DemoDivideExpression,
    DemoEntity,
    DemoEqualsExpression,
    DemoExpression,
    DemoFunction,
    DemoFunctionCallExpression,
    DemoGreaterThenExpression,
    DemoIfExpression,
    DemoLessThenExpression,
    DemoLiteralExpression,
    DemoModel,
    DemoMultiplyExpression,
    DemoNumberLiteralExpression,
    DemoOrExpression,
    DemoPlaceholderExpression,
    DemoPlusExpression,
    DemoStringLiteralExpression,
    DemoType,
    DemoVariable,
    DemoVariableRef
} from "../../language";

export class DemoCreator {
    createDemoModel(name: string): DemoModel {
        let result = new DemoModel();
        result.name = name;
        // let xx = this.createDemoEntity( ... );
        // result.entities = [];
        // result.entities.push(xx);
        // let xx = this.createDemoFunction( ... );
        // result.functions = [];
        // result.functions.push(xx);

        return result;
    }
    createDemoEntity(name: string): DemoEntity {
        let result = new DemoEntity();
        result.name = name;
        // let xx = this.createDemoAttribute( ... );
        // result.attributes = [];
        // result.attributes.push(xx);
        // let xx = this.createDemoFunction( ... );
        // result.functions = [];
        // result.functions.push(xx);

        return result;
    }
    createDemoAttribute(name: string, declaredType: DemoAttributeType): DemoAttribute {
        let result = new DemoAttribute();
        result.name = name;

        return result;
    }
    createDemoFunction(name: string, declaredType: DemoAttributeType): DemoFunction {
        let result = new DemoFunction();
        result.name = name;
        // result.expression = this.createDemoExpression( ... );
        // let xx = this.createDemoVariable( ... );
        // result.parameters = [];
        // result.parameters.push(xx);

        return result;
    }
    createDemoVariable(name: string, declaredType: DemoAttributeType): DemoVariable {
        let result = new DemoVariable();
        result.name = name;

        return result;
    }

    createDemoPlaceholderExpression(): DemoPlaceholderExpression {
        let result = new DemoPlaceholderExpression();

        return result;
    }

    createDemoStringLiteralExpression(value: string): DemoStringLiteralExpression {
        let result = new DemoStringLiteralExpression();
        result.value = value;

        return result;
    }
    createDemoNumberLiteralExpression(value: string): DemoNumberLiteralExpression {
        let result = new DemoNumberLiteralExpression();
        result.value = value;

        return result;
    }
    createDemoBooleanLiteralExpression(value: string): DemoBooleanLiteralExpression {
        let result = new DemoBooleanLiteralExpression();
        result.value = value;

        return result;
    }
    createDemoAbsExpression(): DemoAbsExpression {
        let result = new DemoAbsExpression();

        // result.expr = this.createDemoExpression( ... );

        return result;
    }

    createDemoMultiplyExpression(): DemoMultiplyExpression {
        let result = new DemoMultiplyExpression();

        // result.left = this.createDemoExpression( ... );
        // result.right = this.createDemoExpression( ... );

        return result;
    }
    createDemoPlusExpression(): DemoPlusExpression {
        let result = new DemoPlusExpression();

        // result.left = this.createDemoExpression( ... );
        // result.right = this.createDemoExpression( ... );

        return result;
    }
    createDemoDivideExpression(): DemoDivideExpression {
        let result = new DemoDivideExpression();

        // result.left = this.createDemoExpression( ... );
        // result.right = this.createDemoExpression( ... );

        return result;
    }
    createDemoAndExpression(): DemoAndExpression {
        let result = new DemoAndExpression();

        // result.left = this.createDemoExpression( ... );
        // result.right = this.createDemoExpression( ... );

        return result;
    }
    createDemoOrExpression(): DemoOrExpression {
        let result = new DemoOrExpression();

        // result.left = this.createDemoExpression( ... );
        // result.right = this.createDemoExpression( ... );

        return result;
    }

    createDemoLessThenExpression(): DemoLessThenExpression {
        let result = new DemoLessThenExpression();

        // result.left = this.createDemoExpression( ... );
        // result.right = this.createDemoExpression( ... );

        return result;
    }
    createDemoGreaterThenExpression(): DemoGreaterThenExpression {
        let result = new DemoGreaterThenExpression();

        // result.left = this.createDemoExpression( ... );
        // result.right = this.createDemoExpression( ... );

        return result;
    }
    createDemoEqualsExpression(): DemoEqualsExpression {
        let result = new DemoEqualsExpression();

        // result.left = this.createDemoExpression( ... );
        // result.right = this.createDemoExpression( ... );

        return result;
    }
    createDemoFunctionCallExpression(): DemoFunctionCallExpression {
        let result = new DemoFunctionCallExpression();

        // result.functionDefinition = this.createDemoFunction( ... );
        return result;
    }
    createDemoIfExpression(): DemoIfExpression {
        let result = new DemoIfExpression();

        // result.condition = this.createDemoExpression( ... );
        // result.whenTrue = this.createDemoExpression( ... );
        // result.whenFalse = this.createDemoExpression( ... );

        return result;
    }
    createDemoVariableRef(referredName: string): DemoVariableRef {
        let result = new DemoVariableRef();
        result.referredName = referredName;

        // result.attribute = this.createDemoAttribute( ... );
        return result;
    }
}
