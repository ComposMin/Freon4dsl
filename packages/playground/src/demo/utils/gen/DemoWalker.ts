// Generated by the ProjectIt Language Generator.
import { AllDemoConcepts } from "../../language";
import { DemoConceptType } from "../../language/Demo";
import {
    DemoModel,
    DemoEntity,
    DemoAttribute,
    DemoFunction,
    DemoVariable,
    DemoExpression,
    DemoPlaceholderExpression,
    DemoLiteralExpression,
    DemoStringLiteralExpression,
    DemoNumberLiteralExpression,
    DemoBooleanLiteralExpression,
    DemoAbsExpression,
    DemoBinaryExpression,
    DemoMultiplyExpression,
    DemoPlusExpression,
    DemoDivideExpression,
    DemoAndExpression,
    DemoOrExpression,
    DemoComparisonExpression,
    DemoLessThenExpression,
    DemoGreaterThenExpression,
    DemoEqualsExpression,
    DemoFunctionCallExpression,
    DemoIfExpression,
    DemoVariableRef
} from "../../language";
// TODO change import to @project/core
import { PiLogger } from "../../../../../core/src/util/PiLogging";
import { DemoWorker } from "./DemoWorker";

const LOGGER = new PiLogger("DemoWalker");

export class DemoWalker {
    myWorker: DemoWorker;

    public walk(modelelement: AllDemoConcepts, includeChildren?: boolean) {
        if (modelelement instanceof DemoModel) {
            this.walkDemoModel(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoEntity) {
            this.walkDemoEntity(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoAttribute) {
            this.walkDemoAttribute(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoFunction) {
            this.walkDemoFunction(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoVariable) {
            this.walkDemoVariable(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoExpression) {
            this.walkDemoExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoPlaceholderExpression) {
            this.walkDemoPlaceholderExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoLiteralExpression) {
            this.walkDemoLiteralExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoStringLiteralExpression) {
            this.walkDemoStringLiteralExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoNumberLiteralExpression) {
            this.walkDemoNumberLiteralExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoBooleanLiteralExpression) {
            this.walkDemoBooleanLiteralExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoAbsExpression) {
            this.walkDemoAbsExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoBinaryExpression) {
            this.walkDemoBinaryExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoMultiplyExpression) {
            this.walkDemoMultiplyExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoPlusExpression) {
            this.walkDemoPlusExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoDivideExpression) {
            this.walkDemoDivideExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoAndExpression) {
            this.walkDemoAndExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoOrExpression) {
            this.walkDemoOrExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoComparisonExpression) {
            this.walkDemoComparisonExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoLessThenExpression) {
            this.walkDemoLessThenExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoGreaterThenExpression) {
            this.walkDemoGreaterThenExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoEqualsExpression) {
            this.walkDemoEqualsExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoFunctionCallExpression) {
            this.walkDemoFunctionCallExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoIfExpression) {
            this.walkDemoIfExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoVariableRef) {
            this.walkDemoVariableRef(modelelement, includeChildren);
        }
    }

    public walkDemoModel(modelelement: DemoModel, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoModel(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                modelelement.entities.forEach(p => {
                    this.walkDemoEntity(p, includeChildren);
                });
                modelelement.functions.forEach(p => {
                    this.walkDemoFunction(p, includeChildren);
                });
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoEntity(modelelement: DemoEntity, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoEntity(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                modelelement.attributes.forEach(p => {
                    this.walkDemoAttribute(p, includeChildren);
                });
                modelelement.functions.forEach(p => {
                    this.walkDemoFunction(p, includeChildren);
                });
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoAttribute(modelelement: DemoAttribute, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoAttribute(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoFunction(modelelement: DemoFunction, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoFunction(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.expression, includeChildren);
                modelelement.parameters.forEach(p => {
                    this.walkDemoVariable(p, includeChildren);
                });
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoVariable(modelelement: DemoVariable, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoVariable(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoExpression(modelelement: DemoExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoPlaceholderExpression(modelelement: DemoPlaceholderExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoPlaceholderExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoLiteralExpression(modelelement: DemoLiteralExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoLiteralExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoStringLiteralExpression(modelelement: DemoStringLiteralExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoStringLiteralExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoNumberLiteralExpression(modelelement: DemoNumberLiteralExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoNumberLiteralExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoBooleanLiteralExpression(modelelement: DemoBooleanLiteralExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoBooleanLiteralExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoAbsExpression(modelelement: DemoAbsExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoAbsExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.expr, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoBinaryExpression(modelelement: DemoBinaryExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoBinaryExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoMultiplyExpression(modelelement: DemoMultiplyExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoMultiplyExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoPlusExpression(modelelement: DemoPlusExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoPlusExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoDivideExpression(modelelement: DemoDivideExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoDivideExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoAndExpression(modelelement: DemoAndExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoAndExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoOrExpression(modelelement: DemoOrExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoOrExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoComparisonExpression(modelelement: DemoComparisonExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoComparisonExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoLessThenExpression(modelelement: DemoLessThenExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoLessThenExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoGreaterThenExpression(modelelement: DemoGreaterThenExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoGreaterThenExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoEqualsExpression(modelelement: DemoEqualsExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoEqualsExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoFunctionCallExpression(modelelement: DemoFunctionCallExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoFunctionCallExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoIfExpression(modelelement: DemoIfExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoIfExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.condition, includeChildren);
                this.walkDemoExpression(modelelement.whenTrue, includeChildren);
                this.walkDemoExpression(modelelement.whenFalse, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoVariableRef(modelelement: DemoVariableRef, includeChildren?: boolean) {
        if (!!this.myWorker) {
            // do the work
            this.myWorker.execDemoVariableRef(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }
}
