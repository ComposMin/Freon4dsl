// Generated by the ProjectIt Language Generator.
import { AllDemoConcepts, DemoConceptType } from "../../language";
import {
    DemoModel,
    DemoEntity,
    DemoAttribute,
    DemoFunction,
    DemoVariable,
    DemoExpression,
    DemoPlaceholderExpression,
    DemoLiteralExpression,
    DemoStringLiteralExpression,
    DemoNumberLiteralExpression,
    DemoBooleanLiteralExpression,
    DemoAbsExpression,
    DemoBinaryExpression,
    DemoMultiplyExpression,
    DemoPlusExpression,
    DemoDivideExpression,
    DemoAndExpression,
    DemoOrExpression,
    DemoComparisonExpression,
    DemoLessThenExpression,
    DemoGreaterThenExpression,
    DemoEqualsExpression,
    DemoFunctionCallExpression,
    DemoIfExpression,
    DemoVariableRef
} from "../../language";
import { DemoAttributeType } from "../../language";

// TODO change import to @project/core
import { PiLogger } from "../../../../../core/src/util/PiLogging";
import { DemoWorker } from "./DemoWorker";

const LOGGER = new PiLogger("DemoWalker");

export class DemoWalker {
    myWorker: DemoWorker;

    public walk(modelelement: AllDemoConcepts, includeChildren?: boolean) {
        if (modelelement instanceof DemoVariableRef) {
            return this.walkDemoVariableRef(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoIfExpression) {
            return this.walkDemoIfExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoFunctionCallExpression) {
            return this.walkDemoFunctionCallExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoEqualsExpression) {
            return this.walkDemoEqualsExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoGreaterThenExpression) {
            return this.walkDemoGreaterThenExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoLessThenExpression) {
            return this.walkDemoLessThenExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoComparisonExpression) {
            return this.walkDemoComparisonExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoOrExpression) {
            return this.walkDemoOrExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoAndExpression) {
            return this.walkDemoAndExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoDivideExpression) {
            return this.walkDemoDivideExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoPlusExpression) {
            return this.walkDemoPlusExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoMultiplyExpression) {
            return this.walkDemoMultiplyExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoBinaryExpression) {
            return this.walkDemoBinaryExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoAbsExpression) {
            return this.walkDemoAbsExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoBooleanLiteralExpression) {
            return this.walkDemoBooleanLiteralExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoNumberLiteralExpression) {
            return this.walkDemoNumberLiteralExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoStringLiteralExpression) {
            return this.walkDemoStringLiteralExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoLiteralExpression) {
            return this.walkDemoLiteralExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoModel) {
            return this.walkDemoModel(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoEntity) {
            return this.walkDemoEntity(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoAttribute) {
            return this.walkDemoAttribute(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoFunction) {
            return this.walkDemoFunction(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoVariable) {
            return this.walkDemoVariable(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoExpression) {
            return this.walkDemoExpression(modelelement, includeChildren);
        }
        if (modelelement instanceof DemoPlaceholderExpression) {
            return this.walkDemoPlaceholderExpression(modelelement, includeChildren);
        }
    }

    public walkDemoModel(modelelement: DemoModel, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoModel(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                modelelement.entities.forEach(p => {
                    this.walkDemoEntity(p, includeChildren);
                });
                modelelement.functions.forEach(p => {
                    this.walkDemoFunction(p, includeChildren);
                });
            }
            this.myWorker.execAfterDemoModel(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoEntity(modelelement: DemoEntity, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoEntity(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                modelelement.attributes.forEach(p => {
                    this.walkDemoAttribute(p, includeChildren);
                });
                modelelement.functions.forEach(p => {
                    this.walkDemoFunction(p, includeChildren);
                });
            }
            this.myWorker.execAfterDemoEntity(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoAttribute(modelelement: DemoAttribute, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoAttribute(modelelement);

            this.myWorker.execAfterDemoAttribute(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoFunction(modelelement: DemoFunction, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoFunction(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.expression, includeChildren);
                modelelement.parameters.forEach(p => {
                    this.walkDemoVariable(p, includeChildren);
                });
            }
            this.myWorker.execAfterDemoFunction(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoVariable(modelelement: DemoVariable, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoVariable(modelelement);

            this.myWorker.execAfterDemoVariable(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoExpression(modelelement: DemoExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoExpression(modelelement);

            this.myWorker.execAfterDemoExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoPlaceholderExpression(modelelement: DemoPlaceholderExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoPlaceholderExpression(modelelement);

            this.myWorker.execAfterDemoPlaceholderExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoLiteralExpression(modelelement: DemoLiteralExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoLiteralExpression(modelelement);

            this.myWorker.execAfterDemoLiteralExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoStringLiteralExpression(modelelement: DemoStringLiteralExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoStringLiteralExpression(modelelement);

            this.myWorker.execAfterDemoStringLiteralExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoNumberLiteralExpression(modelelement: DemoNumberLiteralExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoNumberLiteralExpression(modelelement);

            this.myWorker.execAfterDemoNumberLiteralExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoBooleanLiteralExpression(modelelement: DemoBooleanLiteralExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoBooleanLiteralExpression(modelelement);

            this.myWorker.execAfterDemoBooleanLiteralExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoAbsExpression(modelelement: DemoAbsExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoAbsExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.expr, includeChildren);
            }
            this.myWorker.execAfterDemoAbsExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoBinaryExpression(modelelement: DemoBinaryExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoBinaryExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
            this.myWorker.execAfterDemoBinaryExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoMultiplyExpression(modelelement: DemoMultiplyExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoMultiplyExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
            this.myWorker.execAfterDemoMultiplyExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoPlusExpression(modelelement: DemoPlusExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoPlusExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
            this.myWorker.execAfterDemoPlusExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoDivideExpression(modelelement: DemoDivideExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoDivideExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
            this.myWorker.execAfterDemoDivideExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoAndExpression(modelelement: DemoAndExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoAndExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
            this.myWorker.execAfterDemoAndExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoOrExpression(modelelement: DemoOrExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoOrExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
            this.myWorker.execAfterDemoOrExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoComparisonExpression(modelelement: DemoComparisonExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoComparisonExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
            this.myWorker.execAfterDemoComparisonExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoLessThenExpression(modelelement: DemoLessThenExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoLessThenExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
            this.myWorker.execAfterDemoLessThenExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoGreaterThenExpression(modelelement: DemoGreaterThenExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoGreaterThenExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
            this.myWorker.execAfterDemoGreaterThenExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoEqualsExpression(modelelement: DemoEqualsExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoEqualsExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.left, includeChildren);
                this.walkDemoExpression(modelelement.right, includeChildren);
            }
            this.myWorker.execAfterDemoEqualsExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoFunctionCallExpression(modelelement: DemoFunctionCallExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoFunctionCallExpression(modelelement);

            this.myWorker.execAfterDemoFunctionCallExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoIfExpression(modelelement: DemoIfExpression, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoIfExpression(modelelement);

            // work on children in the model tree
            if (!(includeChildren === undefined) && includeChildren) {
                this.walkDemoExpression(modelelement.condition, includeChildren);
                this.walkDemoExpression(modelelement.whenTrue, includeChildren);
                this.walkDemoExpression(modelelement.whenFalse, includeChildren);
            }
            this.myWorker.execAfterDemoIfExpression(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoVariableRef(modelelement: DemoVariableRef, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoVariableRef(modelelement);

            this.myWorker.execAfterDemoVariableRef(modelelement);
        } else {
            LOGGER.error(this, "No worker found.");
            return;
        }
    }

    public walkDemoAttributeType(modelelement: DemoAttributeType, includeChildren?: boolean) {
        if (!!this.myWorker) {
            this.myWorker.execBeforeDemoAttributeType(modelelement);
            this.myWorker.execAfterDemoAttributeType(modelelement);
        }
    }
}
