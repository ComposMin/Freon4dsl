// Generated by the ProjectIt Language Generator.
import {
    DemoModel,
    DemoEntity,
    DemoAttribute,
    DemoFunction,
    DemoVariable,
    DemoExpression,
    DemoPlaceholderExpression,
    DemoLiteralExpression,
    DemoStringLiteralExpression,
    DemoNumberLiteralExpression,
    DemoBooleanLiteralExpression,
    DemoAbsExpression,
    DemoBinaryExpression,
    DemoMultiplyExpression,
    DemoPlusExpression,
    DemoDivideExpression,
    DemoAndExpression,
    DemoOrExpression,
    DemoComparisonExpression,
    DemoLessThenExpression,
    DemoGreaterThenExpression,
    DemoEqualsExpression,
    DemoFunctionCallExpression,
    DemoIfExpression,
    DemoVariableRef
} from "../../language";

export interface DemoWorker {
    execDemoModel(modelelement: DemoModel);

    execDemoEntity(modelelement: DemoEntity);

    execDemoAttribute(modelelement: DemoAttribute);

    execDemoFunction(modelelement: DemoFunction);

    execDemoVariable(modelelement: DemoVariable);

    execDemoExpression(modelelement: DemoExpression);

    execDemoPlaceholderExpression(modelelement: DemoPlaceholderExpression);

    execDemoLiteralExpression(modelelement: DemoLiteralExpression);

    execDemoStringLiteralExpression(modelelement: DemoStringLiteralExpression);

    execDemoNumberLiteralExpression(modelelement: DemoNumberLiteralExpression);

    execDemoBooleanLiteralExpression(modelelement: DemoBooleanLiteralExpression);

    execDemoAbsExpression(modelelement: DemoAbsExpression);

    execDemoBinaryExpression(modelelement: DemoBinaryExpression);

    execDemoMultiplyExpression(modelelement: DemoMultiplyExpression);

    execDemoPlusExpression(modelelement: DemoPlusExpression);

    execDemoDivideExpression(modelelement: DemoDivideExpression);

    execDemoAndExpression(modelelement: DemoAndExpression);

    execDemoOrExpression(modelelement: DemoOrExpression);

    execDemoComparisonExpression(modelelement: DemoComparisonExpression);

    execDemoLessThenExpression(modelelement: DemoLessThenExpression);

    execDemoGreaterThenExpression(modelelement: DemoGreaterThenExpression);

    execDemoEqualsExpression(modelelement: DemoEqualsExpression);

    execDemoFunctionCallExpression(modelelement: DemoFunctionCallExpression);

    execDemoIfExpression(modelelement: DemoIfExpression);

    execDemoVariableRef(modelelement: DemoVariableRef);
}
