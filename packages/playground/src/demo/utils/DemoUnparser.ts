// Generated by the ProjectIt Language Generator.
import { AllDemoConcepts, DemoAttributeType } from "../language/gen/";
import {
    DemoModel,
    DemoEntity,
    DemoAttribute,
    DemoFunction,
    DemoVariable,
    DemoExpression,
    DemoPlaceholderExpression,
    DemoLiteralExpression,
    DemoStringLiteralExpression,
    DemoNumberLiteralExpression,
    DemoBooleanLiteralExpression,
    DemoAbsExpression,
    DemoBinaryExpression,
    DemoMultiplyExpression,
    DemoPlusExpression,
    DemoDivideExpression,
    DemoAndExpression,
    DemoOrExpression,
    DemoComparisonExpression,
    DemoLessThenExpression,
    DemoGreaterThenExpression,
    DemoEqualsExpression,
    DemoFunctionCallExpression,
    DemoIfExpression,
    DemoVariableRef
} from "../language/gen/";
// TODO change import to @project/core
import { PiLogger } from "../../../../core/src/util/PiLogging";

const LOGGER = new PiLogger("DemoUnparser");

// For now, we generate an empty template class as unparser.
// When the editor definition language is finished, the .edit file
// will be used to generate the bodies of the functions below.
export class DemoUnparser {
    public unparse(modelelement: AllDemoConcepts): string {
        if (modelelement instanceof DemoVariableRef) {
            return this.unparseDemoVariableRef(modelelement);
        }
        if (modelelement instanceof DemoIfExpression) {
            return this.unparseDemoIfExpression(modelelement);
        }
        if (modelelement instanceof DemoFunctionCallExpression) {
            return this.unparseDemoFunctionCallExpression(modelelement);
        }
        if (modelelement instanceof DemoEqualsExpression) {
            return this.unparseDemoEqualsExpression(modelelement);
        }
        if (modelelement instanceof DemoGreaterThenExpression) {
            return this.unparseDemoGreaterThenExpression(modelelement);
        }
        if (modelelement instanceof DemoLessThenExpression) {
            return this.unparseDemoLessThenExpression(modelelement);
        }
        if (modelelement instanceof DemoComparisonExpression) {
            return this.unparseDemoComparisonExpression(modelelement);
        }
        if (modelelement instanceof DemoOrExpression) {
            return this.unparseDemoOrExpression(modelelement);
        }
        if (modelelement instanceof DemoAndExpression) {
            return this.unparseDemoAndExpression(modelelement);
        }
        if (modelelement instanceof DemoDivideExpression) {
            return this.unparseDemoDivideExpression(modelelement);
        }
        if (modelelement instanceof DemoPlusExpression) {
            return this.unparseDemoPlusExpression(modelelement);
        }
        if (modelelement instanceof DemoMultiplyExpression) {
            return this.unparseDemoMultiplyExpression(modelelement);
        }
        if (modelelement instanceof DemoBinaryExpression) {
            return this.unparseDemoBinaryExpression(modelelement);
        }
        if (modelelement instanceof DemoAbsExpression) {
            return this.unparseDemoAbsExpression(modelelement);
        }
        if (modelelement instanceof DemoBooleanLiteralExpression) {
            return this.unparseDemoBooleanLiteralExpression(modelelement);
        }
        if (modelelement instanceof DemoNumberLiteralExpression) {
            return this.unparseDemoNumberLiteralExpression(modelelement);
        }
        if (modelelement instanceof DemoStringLiteralExpression) {
            return this.unparseDemoStringLiteralExpression(modelelement);
        }
        if (modelelement instanceof DemoLiteralExpression) {
            return this.unparseDemoLiteralExpression(modelelement);
        }
        if (modelelement instanceof DemoModel) {
            return this.unparseDemoModel(modelelement);
        }
        if (modelelement instanceof DemoEntity) {
            return this.unparseDemoEntity(modelelement);
        }
        if (modelelement instanceof DemoAttribute) {
            return this.unparseDemoAttribute(modelelement);
        }
        if (modelelement instanceof DemoFunction) {
            return this.unparseDemoFunction(modelelement);
        }
        if (modelelement instanceof DemoVariable) {
            return this.unparseDemoVariable(modelelement);
        }
        if (modelelement instanceof DemoExpression) {
            return this.unparseDemoExpression(modelelement);
        }
        if (modelelement instanceof DemoPlaceholderExpression) {
            return this.unparseDemoPlaceholderExpression(modelelement);
        }
        if (modelelement instanceof DemoAttributeType) {
            return this.unparseDemoAttributeType(modelelement);
        }
    }

    public unparseDemoModel(modelelement: DemoModel) : string {
        let result : string = modelelement.name + " {\n";

        // adding the unparse string of children in the model tree
        modelelement.entities.forEach(p => {
            result = result.concat("\t" + this.unparse(p) + "\n" );
        });
        modelelement.functions.forEach(p => {
            result = result.concat("\t" + this.unparse(p) + "\n" );
        });
        return result + "\n}";
    }

    public unparseDemoEntity(modelelement: DemoEntity) : string {
        let result : string = modelelement.name + " {";

        // adding the unparse string of children in the model tree
        modelelement.attributes.forEach(p => {
            result = result.concat("\n\t" + this.unparse(p)).concat(",");
        });
        modelelement.functions.forEach(p => {
            result = result.concat("\n\t" + this.unparse(p)).concat(",");
        });
        return result + "\n}";
    }

    public unparseDemoAttribute(modelelement: DemoAttribute) : string {
        let result : string = modelelement.name;
        result = result.concat( " : " + this.unparse(modelelement.declaredType));
        return result;
    }

    public unparseDemoAttributeType(modelelement: DemoAttributeType) : string {
        let result : string = modelelement.asString();
        return result;
    }

    public unparseDemoFunction(modelelement: DemoFunction) : string {
        let result : string = modelelement.name;

        // adding the unparse string of children in the model tree
        result = result.concat("( ");
        modelelement.parameters.forEach(p => {
            result = result.concat( this.unparse(p));
        });
        result = result.concat(" )");
        result = result.concat(": " + this.unparse(modelelement.declaredType));
        result = result.concat("\n\t\t= " + this.unparse(modelelement.expression));
        return result;
    }

    public unparseDemoVariable(modelelement: DemoVariable) : string {
        let result : string = modelelement.name;
            result = result.concat(" : " + modelelement.declaredType.name);
        return result;
    }

    public unparseDemoExpression(modelelement: DemoExpression) : string {
        if (modelelement instanceof DemoPlaceholderExpression) {
            return this.unparseDemoPlaceholderExpression(modelelement);
        }
        if (modelelement instanceof DemoLiteralExpression) {
            return this.unparseDemoLiteralExpression(modelelement);
        }
        if (modelelement instanceof DemoAbsExpression) {
            return this.unparseDemoAbsExpression(modelelement);
        }
        if (modelelement instanceof DemoBinaryExpression) {
            return this.unparseDemoBinaryExpression(modelelement);
        }
        if (modelelement instanceof DemoFunctionCallExpression) {
            return this.unparseDemoFunctionCallExpression(modelelement);
        }
        if (modelelement instanceof DemoIfExpression) {
            return this.unparseDemoIfExpression(modelelement);
        }
        if (modelelement instanceof DemoVariableRef) {
            return this.unparseDemoVariableRef(modelelement);
        }
    }

    public unparseDemoPlaceholderExpression(modelelement: DemoPlaceholderExpression) : string {
        return "placeHolderExpression";
    }

    public unparseDemoLiteralExpression(modelelement: DemoLiteralExpression) : string {
        if (modelelement instanceof DemoStringLiteralExpression) {
            return this.unparseDemoStringLiteralExpression(modelelement);
        }
        if (modelelement instanceof DemoNumberLiteralExpression) {
            return this.unparseDemoNumberLiteralExpression(modelelement);
        }
        if (modelelement instanceof DemoBooleanLiteralExpression) {
            return this.unparseDemoBooleanLiteralExpression(modelelement);
        }
    }

    public unparseDemoStringLiteralExpression(modelelement: DemoStringLiteralExpression) : string {
        return "\"" + modelelement.value + "\"";
    }

    public unparseDemoNumberLiteralExpression(modelelement: DemoNumberLiteralExpression) : string {
        return modelelement.value;
    }

    public unparseDemoBooleanLiteralExpression(modelelement: DemoBooleanLiteralExpression) : string {
        return modelelement.value;
    }

    public unparseDemoAbsExpression(modelelement: DemoAbsExpression) : string {
        return "abs(" + this.unparse(modelelement.expr) + " ";
    }

    public unparseDemoBinaryExpression(modelelement: DemoBinaryExpression) : string {
        return "";
    }

    public unparseDemoFunctionCallExpression(modelelement: DemoFunctionCallExpression) : string {
        return modelelement.functionDefinition.name + "()";
    }

    public unparseDemoIfExpression(modelelement: DemoIfExpression) : string {
        return "if (" + this.unparse(modelelement.condition) + ") { " + 
            this.unparse(modelelement.whenTrue) + " } else { "
            + this.unparse(modelelement.whenFalse) + " }";
    }

    public unparseDemoVariableRef(modelelement: DemoVariableRef) : string {
        return modelelement.attribute.name;
    }
    
    private unparseDemoMultiplyExpression(modelelement: DemoMultiplyExpression): string {
        return "(" + this.unparse(modelelement.left) + " * " +  this.unparse(modelelement.right) + ")";
    }

    private unparseDemoPlusExpression(modelelement: DemoPlusExpression): string {
        return "(" + this.unparse(modelelement.left) + " + " +  this.unparse(modelelement.right) + ")";
    }

    private unparseDemoDivideExpression(modelelement: DemoDivideExpression): string {
        return "(" + this.unparse(modelelement.left) + " / " +  this.unparse(modelelement.right) + ")";
    }

    private unparseDemoAndExpression(modelelement: DemoAndExpression): string {
        return "(" + this.unparse(modelelement.left) + " and " +  this.unparse(modelelement.right) + ")";
    }

    private unparseDemoOrExpression(modelelement: DemoOrExpression): string {
        return "(" + this.unparse(modelelement.left) + " or " +  this.unparse(modelelement.right) + ")";
    }

    private unparseDemoComparisonExpression(modelelement: DemoComparisonExpression): string {
        return "";
    }

    private unparseDemoLessThenExpression(modelelement: DemoLessThenExpression): string {
        return "(" + this.unparse(modelelement.left) + " < " +  this.unparse(modelelement.right) + ")";
    }

    private unparseDemoGreaterThenExpression(modelelement: DemoGreaterThenExpression): string {
        return "(" + this.unparse(modelelement.left) + " > " +  this.unparse(modelelement.right) + ")";
    }

    private unparseDemoEqualsExpression(modelelement: DemoEqualsExpression): string {
        return "(" + this.unparse(modelelement.left) + " = " +  this.unparse(modelelement.right) + ")";
    }

}
