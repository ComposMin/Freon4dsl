language Demo

root concept DemoModel {
    part functions: DemoFunction[]
    name: string
    part entities: DemoEntity[]
}
/*
interface BaseType {
    someProp: number
}

interface Type base BaseType {
    simpleprop: boolean
    part int_attrs: DemoAttribute[]
    part int_functions: DemoFunction[]
    reference baseInterface: DemoEntity
}
*/
concept DemoEntity { // implements Type {
    name: string
    part attributes: DemoAttribute[]
    part functions: DemoFunction[]
    reference baseEntity: DemoEntity
}

concept DemoAttribute {
    reference declaredType: DemoEntity
    name: string
}

concept DemoFunction {
    name: string
    reference declaredType : DemoEntity
    part expression: DemoExpression
    part parameters: DemoVariable[]
}

concept DemoVariable {
    name: string
    reference declaredType: DemoEntity
}

abstract expression concept DemoExpression {
    part appliedfeature: AppliedFeature
}

concept AppliedFeature {
    part appliedfeature: AppliedFeature
    value: string
    reference type: DemoEntity
}

expression placeholder concept DemoPlaceholderExpression {
    part appliedfeature: AppliedFeature
}

abstract expression concept DemoLiteralExpression base DemoExpression {}

concept DemoStringLiteralExpression base DemoLiteralExpression {
    value: string
}

concept DemoNumberLiteralExpression base DemoLiteralExpression {
    value: string
}

concept DemoBooleanLiteralExpression base DemoLiteralExpression {
    value: string
}

concept DemoAbsExpression base DemoExpression {
    part expr: DemoExpression
}

abstract binary expression concept DemoBinaryExpression base DemoExpression {
    part left: DemoExpression
    part right: DemoExpression
}

concept DemoMultiplyExpression base DemoBinaryExpression {
    priority = "8"
}

concept DemoPlusExpression base DemoBinaryExpression {
    priority = "4"
}

concept DemoDivideExpression base DemoBinaryExpression {
    priority = "8"
}

concept DemoAndExpression base DemoBinaryExpression {
    priority = "1"
}

concept DemoOrExpression base DemoBinaryExpression {
    priority = "1"
}

abstract concept DemoComparisonExpression base DemoBinaryExpression {
}

concept DemoLessThenExpression base DemoComparisonExpression {
    priority = "10"
}

concept DemoGreaterThenExpression base DemoComparisonExpression {
    priority = "10"
}

concept DemoEqualsExpression base DemoComparisonExpression {
    priority = "10"
}

concept DemoFunctionCallExpression base DemoExpression {
    reference functionDefinition: DemoFunction
}

concept DemoIfExpression base DemoExpression {
    part condition: DemoExpression
    part whenTrue: DemoExpression
    part whenFalse: DemoExpression
}

concept DemoVariableRef base DemoExpression {
    reference variable: DemoVariable
}

enumeration DemoAttributeType {
    String
    Integer
    Boolean
    ANY
}

union DemoType {
    DemoEntity
    DemoAttributeType
}

