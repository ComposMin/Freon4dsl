language Demo

root concept Demo {
    models: DemoModel[];
}

unit concept DemoModel {
    main: DemoEntity;
    functions: DemoFunction[];
    name: string;
    entities: DemoEntity[];
    types: Type[];
    type: Type;
}
interface BaseType {
    name: string;
    baseInterface_attr: number;
}
interface X {
}
interface Type base BaseType, X {
    simpleprop: string;
    int_attrs: DemoAttribute[];
    int_functions: DemoFunction[];
    reference baseInterface: DemoEntity;
}

abstract concept Nothing {
    x: string;
}

concept DemoEntity base Nothing implements Type {
    attributes: DemoAttribute[];
    entAttributes: DemoAttributeWithEntityType[];
    functions: DemoFunction[];
    reference baseEntity: DemoEntity;
}
limited DemoAttributeType implements Type {
    name: string;
    extra: number;
    String = { name: "String", "extra": "199"}
    Integer = { "name": "Integer", "extra": "240261"}
    Boolean = { "name": "Boolean", "extra": "5479"}
    ANY = { "name": "ANY", "extra": "456"}
}
expression DemoAbsExpression base DemoExpression {
    expr: DemoExpression;
}

concept DemoFunction {
    name: string;
    reference declaredType : Type;
    expression: DemoExpression;
    parameters: DemoVariable[];
}
concept DemoAttribute {
    reference declaredType: DemoAttributeType;
    name: string;
}

concept DemoAttributeWithEntityType {
    reference declaredType: DemoEntity;
    name: string;
}

concept DemoVariable {
    name: string;
    reference declaredType: DemoEntity;
}

abstract expression DemoExpression {
    appliedfeature?: AppliedFeature;
}

abstract concept AppliedFeature {
    appliedfeature?: AppliedFeature;
}

concept DemoAttributeRef base AppliedFeature {
    reference attribute: DemoAttributeWithEntityType;
}

expression DemoVariableRef base DemoExpression {
    reference variable: DemoVariable;
}



abstract expression DemoLiteralExpression base DemoExpression {}

expression DemoStringLiteralExpression base DemoLiteralExpression {
    value: string;
}

expression DemoNumberLiteralExpression base DemoLiteralExpression {
    value: string; // TODO should be changed to type number
}

expression DemoBooleanLiteralExpression base DemoLiteralExpression {
    value: string; // TODO should be changed to type boolean
}



abstract binary expression DemoBinaryExpression base DemoExpression {
    left: DemoExpression;
    right: DemoExpression;
}

binary expression DemoMultiplyExpression base DemoBinaryExpression {
    priority = 8;
}

binary expression DemoPlusExpression base DemoBinaryExpression {
    priority = 4;
}

binary expression DemoDivideExpression base DemoBinaryExpression {
    priority = 8;
}

binary expression DemoAndExpression base DemoBinaryExpression {
    priority = 1;
}

binary expression DemoOrExpression base DemoBinaryExpression {
    priority = 1;
}

abstract binary expression DemoComparisonExpression base DemoBinaryExpression {
}

binary expression DemoLessThenExpression base DemoComparisonExpression {
    priority = 10;
}

binary expression DemoGreaterThenExpression base DemoComparisonExpression {
    priority = 10;
}

binary expression DemoEqualsExpression base DemoComparisonExpression {
    priority = 10;
}

expression DemoFunctionCallExpression base DemoExpression {
    reference functionDefinition: DemoFunction;
}

expression DemoIfExpression base DemoExpression {
    condition: DemoExpression;
    whenTrue: DemoExpression;
    whenFalse: DemoExpression;
}

