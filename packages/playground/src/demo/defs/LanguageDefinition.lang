language Demo

root concept DemoModel {
    functions: DemoFunction[];
    name: string;
    entities: DemoEntity[];
}

interface BaseType {
    name: string;
}

interface Type base BaseType {
    simpleprop: boolean;
    int_attr: DemoAttribute;
    int_functions: DemoFunction[];
    reference baseInterface: DemoEntity;
}

concept DemoEntity implements Type {
    attributes: DemoAttribute[];
    functions: DemoFunction[];
    reference baseEntity: DemoEntity;
}

concept DemoAttribute {
    reference declaredType: DemoAttributeType;
    name: string;
}

concept DemoFunction {
    name: string;
    reference declaredType : DemoEntity;
    expression: DemoExpression;
    parameters: DemoVariable[];
}

concept DemoVariable { // base SomeOther {
    name: string;
    reference declaredType: DemoEntity;
}
/*
abstract concept SomeOther {
//TODO editor should also be able to show booleans
    extra: boolean;
}
*/
limited DemoAttributeType implements BaseType {
// TODO editor should be capable to show numbers
//    id: number;
//    String =    { "name": "string", "id": 4 }
//    Integer =   { "name": "number", "id": 3 }
//    Boolean =   { "name": "bool", "id": 2 }
//    ANY =       { "name": "ANY", "id": 0 }
    String =    { "name": "string" }
    Integer =   { "name": "number" }
    Boolean =   { "name": "bool" }
    ANY =       { "name": "ANY" }
}

abstract expression DemoExpression {
//    appliedfeature: AppliedFeature;
}

expression AppliedFeature {
//    appliedfeature: AppliedFeature;
    value: string;
    reference type: DemoEntity;
}

// expression placeholder DemoPlaceholderExpression {
//    appliedfeature: AppliedFeature;
// }

abstract expression DemoLiteralExpression base DemoExpression {
    value: string;
}

expression DemoStringLiteralExpression base DemoLiteralExpression {
}

expression DemoNumberLiteralExpression base DemoLiteralExpression {
}

expression DemoBooleanLiteralExpression base DemoLiteralExpression {
}

expression DemoAbsExpression base DemoExpression {
    expr: DemoExpression;
}

abstract binary expression DemoBinaryExpression base DemoExpression {
    left: DemoExpression;
    right: DemoExpression;
}

expression DemoMultiplyExpression base DemoBinaryExpression {
    priority = 8;
}

expression DemoPlusExpression base DemoBinaryExpression {
    priority = 4;
}

expression DemoDivideExpression base DemoBinaryExpression {
    priority = 8;
}

expression DemoAndExpression base DemoBinaryExpression {
    priority = 1;
}

expression DemoOrExpression base DemoBinaryExpression {
    priority = 1;
}

abstract expression DemoComparisonExpression base DemoBinaryExpression {
}

expression DemoLessThenExpression base DemoComparisonExpression {
    priority = 10;
}

expression DemoGreaterThenExpression base DemoComparisonExpression {
    priority = 10;
}

expression DemoEqualsExpression base DemoComparisonExpression {
    priority = 10;
}

expression DemoFunctionCallExpression base DemoExpression {
    reference functionDefinition: DemoFunction;
}

expression DemoIfExpression base DemoExpression {
    condition: DemoExpression;
    whenTrue: DemoExpression;
    whenFalse: DemoExpression;
}

expression DemoVariableRef base DemoExpression {
    reference variable: DemoVariable;
}

