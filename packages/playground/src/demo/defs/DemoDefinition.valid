validator Demo for language Demo

DemoModel {
    @validName // default Identifier
    @notEmpty entities
    @notEmpty functions
}

DemoEntity {
    @validName 
    @notEmpty attributes
    @notEmpty functions
}

DemoAttribute {
    @validName  
}

DemoFunction {
    @validName 
    @typecheck conformsTo (expression, DemoAttributeType.String) 
    @notEmpty expression
}

DemoVariable {
    @validName 
}

DemoAbsExpression {
    @typecheck equalsType( expr, DemoAttributeType.Integer ) 
}

DemoMultiplyExpression {
    @typecheck equalsType( left, DemoAttributeType.Integer )
    @typecheck equalsType( right, DemoAttributeType.Integer )
}

DemoPlusExpression {
    @typecheck equalsType( left, DemoAttributeType.Integer )
    @typecheck equalsType( right, DemoAttributeType.Integer )
}

DemoDivideExpression {
    @typecheck equalsType( left, DemoAttributeType.Integer )
    @typecheck equalsType( right, DemoAttributeType.Integer )
}

DemoAndExpression {
    @typecheck equalsType( left, DemoAttributeType.Boolean )
    @typecheck equalsType( right, DemoAttributeType.Boolean )
}

DemoOrExpression {
    @typecheck equalsType( left , DemoAttributeType.Boolean )
    @typecheck equalsType( left, DemoAttributeType.Boolean )
    @typecheck equalsType( right, DemoAttributeType.Boolean )
}

DemoComparisonExpression {
    @typecheck equalsType( left, right )
}

DemoIfExpression {
    @typecheck equalsType( condition, DemoAttributeType.Boolean )
    @typecheck conformsTo( whenTrue, whenFalse )
}
