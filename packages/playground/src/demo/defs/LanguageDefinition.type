typer Demo for language Demo

@istype {DemoEntity, DemoAttributeType, DemoType }

@anytype {
    @conformsto this.base
    @conformsto this.implements
    @conformsto DemoAttributeType:ANY
    @equalsto DemoAttributeType:ANY
}

DemoAttribute {
    @infertype this.declaredTyp
}
DemoFunction {
    @infertype this.declaredType
}
DemoVariable  {
    @infertype this.declaredType
}
DemoExpression {
    abstract @infertype  this.test // for now
}
DemoStringLiteralExpression {
    @infertype DemoAttributeType:String
}
DemoNumberLiteralExpression {
    @infertype DemoAttributeType:Integer
}
DemoBooleanLiteralExpression {
    @infertype DemoAttributeType:Boolean
}
DemoAbsExpression {
    @infertype this.expr
}
DemoMultiplyExpression {
    @infertype this.left
}
DemoPlusExpression {
    @infertype commonSuperType(this.left, this.right) 
}
DemoDivideExpression {
    @infertype this.left
}
DemoComparisonExpression {
    @infertype DemoAttributeType:Boolean
}
DemoFunction {
    @infertype this.declaredType
}
DemoFunctionCallExpression {
    @infertype this.functionDefinition
}
DemoIfExpression    {
    @infertype commonSuperType(this.whenTrue, this.whenFalse)
}
DemoVariable {
    @infertype this.declaredType
}
DemoVariableRef   {
    @infertype this.attribute  
}