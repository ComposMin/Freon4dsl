typer Demo for language Demo

@isType {DemoEntity, DemoAttributeType, DemoType }

@allTypes {
    @conformsto: this.super
    @conformsto: this.implements
}
DemoEntity {
    @conformsto: this.super
    @conformsto: this.implements
}

DemoAttributeType {
   @conformsTo: DemoAttributeType:ANY
}

DemoAttributeType.DecimalNumber {
   @conformsTo: DemoAttributeType:Integer
}

@conformsTo (@anyType, DemoAttributeType:ANY) = true 
@conformsTo (DemoEntity, this.super) = true 
@equalsType (@anyType, @anyType.super) = true
@equalsType (@anyType, DemoAttributeType:ANY) = true 
@equalsType (DemoAttributeType:String, DemoAttributeType:ANY) = true 

DemoAttribute @inferType this.declaredType

DemoFunction @inferType this.declaredType

DemoVariable  @inferType this.declaredType

DemoExpression abstract @inferType  // for now

DemoStringLiteralExpression @inferType DemoAttributeType:String

DemoNumberLiteralExpression @inferType DemoAttributeType:Integer

DemoBooleanLiteralExpression @inferType DemoAttributeType:Boolean

DemoAbsExpression @inferType this.expr

DemoMultiplyExpression @inferType this.left

DemoPlusExpression @inferType if (this.left == String || this.right == String) String else commonSuperType(left,right) 

DemoDivideExpression @inferType this.left

DemoComparisonExpression @inferType DemoAttributeType:Boolean

DemoFunctionDefinition @inferType this.declaredType

DemoFunctionCallExpression @inferType this.functionDefinition

DemoIfExpression    @inferType commonSuperType(this.whenTrue, this.whenFalse)

DemoVariable @inferType this.declaredType

DemoVariableRef   @inferType this.attribute  
