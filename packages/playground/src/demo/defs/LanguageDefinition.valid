validator Demo for language Demo

DemoModel {
    validName // default Identifier
    notEmpty this.entities
    notEmpty this.functions
}

DemoEntity {
    validName 
    notEmpty this.attributes
    notEmpty this.functions
}

DemoAttribute {
    validName  
}

DemoFunction {
    typecheck conformsTo (this.expression, this.declaredType) 
    notEmpty this.parameters
    validName 
}

DemoVariable {
    validName 
}

DemoAbsExpression {
    typecheck equalsType( this.expr, DemoAttributeType:Integer ) 
}

DemoMultiplyExpression {
    typecheck equalsType( this.left, DemoAttributeType:Integer )
    typecheck equalsType( this.right, DemoAttributeType:Integer )
}

DemoPlusExpression {
    typecheck equalsType( this.left, DemoAttributeType:Integer )
    typecheck equalsType( this.right, DemoAttributeType:Integer )
    typecheck conformsTo( this.left, this.right )
}

DemoDivideExpression {
    typecheck equalsType( this.left, DemoAttributeType:Integer )
    typecheck equalsType( this.right, DemoAttributeType:Integer )
}

DemoAndExpression {
    typecheck equalsType( this.left, DemoAttributeType:Boolean )
    typecheck equalsType( this.right, DemoAttributeType:Boolean )
}

DemoOrExpression {
    typecheck equalsType( this.left, DemoAttributeType:Boolean )
    typecheck equalsType( this.right, DemoAttributeType:Boolean )
}

DemoComparisonExpression {
    typecheck equalsType( this.left, this.right )
}

DemoIfExpression {
    typecheck equalsType( this.condition, DemoAttributeType:Boolean )
    typecheck conformsTo( this.whenTrue, this.whenFalse )
}
