validator Demo for language Demo

DemoModel {
    @validName name // default Identifier
    @notEmpty entities
    @notEmpty functions
}

DemoEntity {
    @validName: name
    @notEmpty attributes
    @notEmpty functions
}

DemoAttribute {
    @validName: name 
}

DemoFunction {
    @validName name
    @typecheck conforms(expression, AttributeType.String) 
    @notEmpty expression
}

DemoVariable {
    @validName name
}

DemoAbsExpression base DemoExpression {
    @typecheck equalsType(expr, DemoAttributeType.Integer)
}

DemoMultiplyExpression {
    @typecheck left = DemoAttributeType.Integer
    @typecheck right = DemoAttributeType.Integer
}

DemoPlusExpression {
    @typecheck left = DemoAttributeType.Integer
    @typecheck right = DemoAttributeType.Integer
}

DemoDivideExpression {
    @typecheck left = DemoAttributeType.Integer
    @typecheck right = DemoAttributeType.Integer
}

DemoAndExpression {
    @typecheck left = DemoAttributeType.Boolean
    @typecheck right = DemoAttributeType.Boolean
}

DemoOrExpression {
    @typecheck left = DemoAttributeType.Boolean
    @typecheck right = DemoAttributeType.Boolean
}

DemoComparisonExpression {
	@typecheck left conformsTo right
}

DemoIfExpression {
    @typecheck condition = DemoAttributeType.Boolean
    @typecheck conformsTo(whenTrue, whenFalse)
}
