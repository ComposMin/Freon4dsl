validator Demo for language Demo

DemoModel {
    validName // default Identifier
    notEmpty self.entities
    notEmpty self.functions
}

DemoEntity {
    validName 
    notEmpty self.attributes
    notEmpty self.functions
}

DemoAttribute {
    validName self.name
}

DemoFunction {
    typecheck conformsTo (self.expression, self.declaredType)
    notEmpty self.parameters
    validName 
}

DemoVariable {
    validName 
}

DemoAbsExpression {
    typecheck equalsType( self.expr, DemoAttributeType:Integer )
}

DemoMultiplyExpression {
    typecheck equalsType( self.left, DemoAttributeType:Integer )
    typecheck equalsType( self.right, DemoAttributeType:Integer )
}

DemoPlusExpression {
    typecheck equalsType( self.left, DemoAttributeType:Integer )
    typecheck equalsType( self.right, DemoAttributeType:Integer )
    typecheck conformsTo( self.left, self.right )
}

DemoDivideExpression {
    typecheck equalsType( self.left, DemoAttributeType:Integer )
    typecheck equalsType( self.right, DemoAttributeType:Integer )
}

DemoAndExpression {
    typecheck equalsType( self.left, DemoAttributeType:Boolean )
    typecheck equalsType( self.right, DemoAttributeType:Boolean )
}

DemoOrExpression {
    typecheck equalsType( self.left, DemoAttributeType:Boolean )
    typecheck equalsType( self.right, DemoAttributeType:Boolean )
}

DemoComparisonExpression {
    typecheck equalsType( self.left, self.right )
}

DemoIfExpression {
    typecheck equalsType( self.condition, DemoAttributeType:Boolean )
    typecheck conformsTo( self.whenTrue, self.whenFalse )
}
