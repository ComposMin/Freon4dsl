// Generated by the ProjectIt Language Generator.
import { AllDemoConcepts } from "../../language";
import { PiValidator, PiError, PiTyper } from "@projectit/core";
import { DemoConceptType } from "../../language/Demo";
import {
    DemoModel,
    DemoEntity,
    DemoAttribute,
    DemoFunction,
    DemoVariable,
    DemoExpression,
    DemoPlaceholderExpression,
    DemoLiteralExpression,
    DemoStringLiteralExpression,
    DemoNumberLiteralExpression,
    DemoBooleanLiteralExpression,
    DemoAbsExpression,
    DemoBinaryExpression,
    DemoMultiplyExpression,
    DemoPlusExpression,
    DemoDivideExpression,
    DemoAndExpression,
    DemoOrExpression,
    DemoComparisonExpression,
    DemoLessThenExpression,
    DemoGreaterThenExpression,
    DemoEqualsExpression,
    DemoFunctionCallExpression,
    DemoIfExpression,
    DemoVariableRef
} from "../../language";
import { DemoChecker } from "./DemoChecker";

export class DemoValidator implements PiValidator {
    myTyper: PiTyper;

    public validate(modelelement: AllDemoConcepts, includeChildren?: boolean): PiError[] {
        let errorlist: PiError[] = [];

        if (modelelement instanceof DemoModel) {
            this.validateDemoModel(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoEntity) {
            this.validateDemoEntity(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoAttribute) {
            this.validateDemoAttribute(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoFunction) {
            this.validateDemoFunction(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoVariable) {
            this.validateDemoVariable(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoExpression) {
            this.validateDemoExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoPlaceholderExpression) {
            this.validateDemoPlaceholderExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoLiteralExpression) {
            this.validateDemoLiteralExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoStringLiteralExpression) {
            this.validateDemoStringLiteralExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoNumberLiteralExpression) {
            this.validateDemoNumberLiteralExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoBooleanLiteralExpression) {
            this.validateDemoBooleanLiteralExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoAbsExpression) {
            this.validateDemoAbsExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoBinaryExpression) {
            this.validateDemoBinaryExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoMultiplyExpression) {
            this.validateDemoMultiplyExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoPlusExpression) {
            this.validateDemoPlusExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoDivideExpression) {
            this.validateDemoDivideExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoAndExpression) {
            this.validateDemoAndExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoOrExpression) {
            this.validateDemoOrExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoComparisonExpression) {
            this.validateDemoComparisonExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoLessThenExpression) {
            this.validateDemoLessThenExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoGreaterThenExpression) {
            this.validateDemoGreaterThenExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoEqualsExpression) {
            this.validateDemoEqualsExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoFunctionCallExpression) {
            this.validateDemoFunctionCallExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoIfExpression) {
            this.validateDemoIfExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoVariableRef) {
            this.validateDemoVariableRef(modelelement, errorlist, includeChildren);
        }

        return errorlist;
    }

    public validateDemoModel(modelelement: DemoModel, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoModel(modelelement, this.myTyper, errorlist);

        // checking children in the model tree
        if (!(includeChildren === undefined) && includeChildren) {
            modelelement.entities.forEach(p => {
                this.validateDemoEntity(p, errorlist, includeChildren);
            });
            modelelement.functions.forEach(p => {
                this.validateDemoFunction(p, errorlist, includeChildren);
            });
        }
    }

    public validateDemoEntity(modelelement: DemoEntity, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoEntity(modelelement, this.myTyper, errorlist);

        // checking children in the model tree
        if (!(includeChildren === undefined) && includeChildren) {
            modelelement.attributes.forEach(p => {
                this.validateDemoAttribute(p, errorlist, includeChildren);
            });
            modelelement.functions.forEach(p => {
                this.validateDemoFunction(p, errorlist, includeChildren);
            });
        }
    }

    public validateDemoAttribute(modelelement: DemoAttribute, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoAttribute(modelelement, this.myTyper, errorlist);
    }

    public validateDemoFunction(modelelement: DemoFunction, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoFunction(modelelement, this.myTyper, errorlist);

        // checking children in the model tree
        if (!(includeChildren === undefined) && includeChildren) {
            this.validateDemoExpression(modelelement.expression, errorlist, includeChildren);
            modelelement.parameters.forEach(p => {
                this.validateDemoVariable(p, errorlist, includeChildren);
            });
        }
    }

    public validateDemoVariable(modelelement: DemoVariable, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoVariable(modelelement, this.myTyper, errorlist);
    }

    public validateDemoExpression(modelelement: DemoExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks
        if (modelelement instanceof DemoPlaceholderExpression) {
            this.validateDemoPlaceholderExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoLiteralExpression) {
            this.validateDemoLiteralExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoAbsExpression) {
            this.validateDemoAbsExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoBinaryExpression) {
            this.validateDemoBinaryExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoFunctionCallExpression) {
            this.validateDemoFunctionCallExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoIfExpression) {
            this.validateDemoIfExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoVariableRef) {
            this.validateDemoVariableRef(modelelement, errorlist, includeChildren);
        }

        // add checks on this concept
        myChecker.checkDemoExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoPlaceholderExpression(modelelement: DemoPlaceholderExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoPlaceholderExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoLiteralExpression(modelelement: DemoLiteralExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks
        if (modelelement instanceof DemoStringLiteralExpression) {
            this.validateDemoStringLiteralExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoNumberLiteralExpression) {
            this.validateDemoNumberLiteralExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoBooleanLiteralExpression) {
            this.validateDemoBooleanLiteralExpression(modelelement, errorlist, includeChildren);
        }

        // add checks on this concept
        myChecker.checkDemoLiteralExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoStringLiteralExpression(modelelement: DemoStringLiteralExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoStringLiteralExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoLiteralExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoNumberLiteralExpression(modelelement: DemoNumberLiteralExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoNumberLiteralExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoLiteralExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoBooleanLiteralExpression(
        modelelement: DemoBooleanLiteralExpression,
        errorlist: PiError[],
        includeChildren?: boolean
    ) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoBooleanLiteralExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoLiteralExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoAbsExpression(modelelement: DemoAbsExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoAbsExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoExpression(modelelement, this.myTyper, errorlist);

        // checking children in the model tree
        if (!(includeChildren === undefined) && includeChildren) {
            this.validateDemoExpression(modelelement.expr, errorlist, includeChildren);
        }
    }

    public validateDemoBinaryExpression(modelelement: DemoBinaryExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks
        if (modelelement instanceof DemoMultiplyExpression) {
            this.validateDemoMultiplyExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoPlusExpression) {
            this.validateDemoPlusExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoDivideExpression) {
            this.validateDemoDivideExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoAndExpression) {
            this.validateDemoAndExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoOrExpression) {
            this.validateDemoOrExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoComparisonExpression) {
            this.validateDemoComparisonExpression(modelelement, errorlist, includeChildren);
        }

        // add checks on this concept
        myChecker.checkDemoBinaryExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoExpression(modelelement, this.myTyper, errorlist);

        // checking children in the model tree
        if (!(includeChildren === undefined) && includeChildren) {
            this.validateDemoExpression(modelelement.left, errorlist, includeChildren);
            this.validateDemoExpression(modelelement.right, errorlist, includeChildren);
        }
    }

    public validateDemoMultiplyExpression(modelelement: DemoMultiplyExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoMultiplyExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoBinaryExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoPlusExpression(modelelement: DemoPlusExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoPlusExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoBinaryExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoDivideExpression(modelelement: DemoDivideExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoDivideExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoBinaryExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoAndExpression(modelelement: DemoAndExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoAndExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoBinaryExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoOrExpression(modelelement: DemoOrExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoOrExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoBinaryExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoComparisonExpression(modelelement: DemoComparisonExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks
        if (modelelement instanceof DemoLessThenExpression) {
            this.validateDemoLessThenExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoGreaterThenExpression) {
            this.validateDemoGreaterThenExpression(modelelement, errorlist, includeChildren);
        }
        if (modelelement instanceof DemoEqualsExpression) {
            this.validateDemoEqualsExpression(modelelement, errorlist, includeChildren);
        }

        // add checks on this concept
        myChecker.checkDemoComparisonExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoBinaryExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoLessThenExpression(modelelement: DemoLessThenExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoLessThenExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoComparisonExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoGreaterThenExpression(modelelement: DemoGreaterThenExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoGreaterThenExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoComparisonExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoEqualsExpression(modelelement: DemoEqualsExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoEqualsExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoComparisonExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoFunctionCallExpression(modelelement: DemoFunctionCallExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoFunctionCallExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoExpression(modelelement, this.myTyper, errorlist);
    }

    public validateDemoIfExpression(modelelement: DemoIfExpression, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoIfExpression(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoExpression(modelelement, this.myTyper, errorlist);

        // checking children in the model tree
        if (!(includeChildren === undefined) && includeChildren) {
            this.validateDemoExpression(modelelement.condition, errorlist, includeChildren);
            this.validateDemoExpression(modelelement.whenTrue, errorlist, includeChildren);
            this.validateDemoExpression(modelelement.whenFalse, errorlist, includeChildren);
        }
    }

    public validateDemoVariableRef(modelelement: DemoVariableRef, errorlist: PiError[], includeChildren?: boolean) {
        let myChecker = new DemoChecker();

        // use the right checks

        // add checks on this concept
        myChecker.checkDemoVariableRef(modelelement, this.myTyper, errorlist);

        // add checks of baseconcept(s)
        myChecker.checkDemoExpression(modelelement, this.myTyper, errorlist);
    }
}
