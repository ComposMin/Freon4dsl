// Generated by the ProjectIt Language Generator.
import { PiError, PiTyper } from "@projectit/core";
import {
    DemoModel,
    DemoEntity,
    DemoAttribute,
    DemoFunction,
    DemoVariable,
    DemoExpression,
    DemoPlaceholderExpression,
    DemoLiteralExpression,
    DemoStringLiteralExpression,
    DemoNumberLiteralExpression,
    DemoBooleanLiteralExpression,
    DemoAbsExpression,
    DemoBinaryExpression,
    DemoMultiplyExpression,
    DemoPlusExpression,
    DemoDivideExpression,
    DemoAndExpression,
    DemoOrExpression,
    DemoComparisonExpression,
    DemoLessThenExpression,
    DemoGreaterThenExpression,
    DemoEqualsExpression,
    DemoFunctionCallExpression,
    DemoIfExpression,
    DemoVariableRef,
    DemoAttributeType,
    DemoType
} from "../../language";

export class DemoChecker {
    public checkDemoModel(modelelement: DemoModel, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @validName name
        if (this.isValidName(name)) {
            result.push(new PiError("'name' is not a valid identifier", name));
        }
        // @notEmpty this.entities
        if (modelelement.entities.length == 0) {
            result.push(new PiError("List of this.entities may not be empty", modelelement.entities));
        }
        // @notEmpty this.functions
        if (modelelement.functions.length == 0) {
            result.push(new PiError("List of this.functions may not be empty", modelelement.functions));
        }
        return result;
    }

    public checkDemoEntity(modelelement: DemoEntity, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @validName name
        if (this.isValidName(name)) {
            result.push(new PiError("'name' is not a valid identifier", name));
        }
        // @notEmpty this.attributes
        if (modelelement.attributes.length == 0) {
            result.push(new PiError("List of this.attributes may not be empty", modelelement.attributes));
        }
        // @notEmpty this.functions
        if (modelelement.functions.length == 0) {
            result.push(new PiError("List of this.functions may not be empty", modelelement.functions));
        }
        return result;
    }

    public checkDemoAttribute(modelelement: DemoAttribute, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @validName name
        if (this.isValidName(name)) {
            result.push(new PiError("'name' is not a valid identifier", name));
        }
        return result;
    }

    public checkDemoFunction(modelelement: DemoFunction, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @typecheck conformsTo( this.expression, DemoAttributeType:String )
        if (!typer.conformsTo(modelelement.expression, DemoAttributeType.String)) {
            result.push(
                new PiError(
                    "Type of 'DemoAttributeType:String' does not conform to type of 'DemoAttributeType:String'",
                    DemoAttributeType.String
                )
            );
        }
        // @notEmpty this.parameters
        if (modelelement.parameters.length == 0) {
            result.push(new PiError("List of this.parameters may not be empty", modelelement.parameters));
        }
        // @validName name
        if (this.isValidName(name)) {
            result.push(new PiError("'name' is not a valid identifier", name));
        }
        return result;
    }

    public checkDemoVariable(modelelement: DemoVariable, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @validName name
        if (this.isValidName(name)) {
            result.push(new PiError("'name' is not a valid identifier", name));
        }
        return result;
    }

    public checkDemoAbsExpression(modelelement: DemoAbsExpression, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @typecheck equalsType( this.expr, DemoAttributeType:Integer )
        if (!typer.equalsType(modelelement.expr, DemoAttributeType.Integer)) {
            result.push(new PiError("Type of 'DemoAttributeType:Integer' should be DemoAttributeType:Integer", DemoAttributeType.Integer));
        }
        return result;
    }

    public checkDemoMultiplyExpression(modelelement: DemoMultiplyExpression, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @typecheck equalsType( this.left, DemoAttributeType:Integer )
        if (!typer.equalsType(modelelement.left, DemoAttributeType.Integer)) {
            result.push(new PiError("Type of 'DemoAttributeType:Integer' should be DemoAttributeType:Integer", DemoAttributeType.Integer));
        }
        // @typecheck equalsType( this.right, DemoAttributeType:Integer )
        if (!typer.equalsType(modelelement.right, DemoAttributeType.Integer)) {
            result.push(new PiError("Type of 'DemoAttributeType:Integer' should be DemoAttributeType:Integer", DemoAttributeType.Integer));
        }
        return result;
    }

    public checkDemoPlusExpression(modelelement: DemoPlusExpression, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @typecheck equalsType( this.left, DemoAttributeType:Integer )
        if (!typer.equalsType(modelelement.left, DemoAttributeType.Integer)) {
            result.push(new PiError("Type of 'DemoAttributeType:Integer' should be DemoAttributeType:Integer", DemoAttributeType.Integer));
        }
        // @typecheck equalsType( this.right, DemoAttributeType:Integer )
        if (!typer.equalsType(modelelement.right, DemoAttributeType.Integer)) {
            result.push(new PiError("Type of 'DemoAttributeType:Integer' should be DemoAttributeType:Integer", DemoAttributeType.Integer));
        }
        return result;
    }

    public checkDemoDivideExpression(modelelement: DemoDivideExpression, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @typecheck equalsType( this.left, DemoAttributeType:Integer )
        if (!typer.equalsType(modelelement.left, DemoAttributeType.Integer)) {
            result.push(new PiError("Type of 'DemoAttributeType:Integer' should be DemoAttributeType:Integer", DemoAttributeType.Integer));
        }
        // @typecheck equalsType( this.right, DemoAttributeType:Integer )
        if (!typer.equalsType(modelelement.right, DemoAttributeType.Integer)) {
            result.push(new PiError("Type of 'DemoAttributeType:Integer' should be DemoAttributeType:Integer", DemoAttributeType.Integer));
        }
        return result;
    }

    public checkDemoAndExpression(modelelement: DemoAndExpression, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @typecheck equalsType( this.left, DemoAttributeType:Boolean )
        if (!typer.equalsType(modelelement.left, DemoAttributeType.Boolean)) {
            result.push(new PiError("Type of 'DemoAttributeType:Boolean' should be DemoAttributeType:Boolean", DemoAttributeType.Boolean));
        }
        // @typecheck equalsType( this.right, DemoAttributeType:Boolean )
        if (!typer.equalsType(modelelement.right, DemoAttributeType.Boolean)) {
            result.push(new PiError("Type of 'DemoAttributeType:Boolean' should be DemoAttributeType:Boolean", DemoAttributeType.Boolean));
        }
        return result;
    }

    public checkDemoOrExpression(modelelement: DemoOrExpression, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @typecheck equalsType( this.left, DemoAttributeType:Boolean )
        if (!typer.equalsType(modelelement.left, DemoAttributeType.Boolean)) {
            result.push(new PiError("Type of 'DemoAttributeType:Boolean' should be DemoAttributeType:Boolean", DemoAttributeType.Boolean));
        }
        // @typecheck equalsType( this.left, DemoAttributeType:Boolean )
        if (!typer.equalsType(modelelement.left, DemoAttributeType.Boolean)) {
            result.push(new PiError("Type of 'DemoAttributeType:Boolean' should be DemoAttributeType:Boolean", DemoAttributeType.Boolean));
        }
        // @typecheck equalsType( this.right, DemoAttributeType:Boolean )
        if (!typer.equalsType(modelelement.right, DemoAttributeType.Boolean)) {
            result.push(new PiError("Type of 'DemoAttributeType:Boolean' should be DemoAttributeType:Boolean", DemoAttributeType.Boolean));
        }
        return result;
    }

    public checkDemoComparisonExpression(modelelement: DemoComparisonExpression, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @typecheck equalsType( this.left, this.right )
        if (!typer.equalsType(modelelement.left, modelelement.right)) {
            result.push(new PiError("Type of 'this.right' should be this.right", modelelement.right));
        }
        return result;
    }

    public checkDemoIfExpression(modelelement: DemoIfExpression, typer: PiTyper): PiError[] {
        let result: PiError[] = [];
        // @typecheck equalsType( this.condition, DemoAttributeType:Boolean )
        if (!typer.equalsType(modelelement.condition, DemoAttributeType.Boolean)) {
            result.push(new PiError("Type of 'DemoAttributeType:Boolean' should be DemoAttributeType:Boolean", DemoAttributeType.Boolean));
        }
        // @typecheck conformsTo( this.whenTrue, this.whenFalse )
        if (!typer.conformsTo(modelelement.whenTrue, modelelement.whenFalse)) {
            result.push(new PiError("Type of 'this.whenFalse' does not conform to type of 'this.whenFalse'", modelelement.whenFalse));
        }
        return result;
    }

    private isValidName(name: string): boolean {
        // TODO implement this
        return true;
    }
}
