// Generated by the ProjectIt Language Generator.
import * as Keys from "@projectit/core";
import {
    AFTER_BINARY_OPERATOR,
    BEFORE_BINARY_OPERATOR,
    Box,
    EXPRESSION_PLACEHOLDER,
    KeyboardShortcutBehavior,
    LEFT_MOST,
    MetaKey,
    PiActions,
    PiBinaryExpressionCreator,
    PiCaret,
    PiCustomBehavior,
    PiEditor,
    PiElement,
    PiExpressionCreator,
    PiKey,
    PiLogger,
    PiTriggerType,
    PiUtils,
    RIGHT_MOST
} from "@projectit/core";

import { DemoModel } from "../../language/DemoModel";
import { DemoEntity } from "../../language/DemoEntity";
import { DemoAttribute } from "../../language/DemoAttribute";
import { DemoFunction } from "../../language/DemoFunction";
import { DemoVariable } from "../../language/DemoVariable";
import { DemoExpression } from "../../language/DemoExpression";
import { DemoPlaceholderExpression } from "../../language/DemoPlaceholderExpression";
import { DemoLiteralExpression } from "../../language/DemoLiteralExpression";
import { DemoStringLiteralExpression } from "../../language/DemoStringLiteralExpression";
import { DemoNumberLiteralExpression } from "../../language/DemoNumberLiteralExpression";
import { DemoBooleanLiteralExpression } from "../../language/DemoBooleanLiteralExpression";
import { DemoAbsExpression } from "../../language/DemoAbsExpression";
import { DemoBinaryExpression } from "../../language/DemoBinaryExpression";
import { DemoMultiplyExpression } from "../../language/DemoMultiplyExpression";
import { DemoPlusExpression } from "../../language/DemoPlusExpression";
import { DemoDivideExpression } from "../../language/DemoDivideExpression";
import { DemoAndExpression } from "../../language/DemoAndExpression";
import { DemoOrExpression } from "../../language/DemoOrExpression";
import { DemoComparisonExpression } from "../../language/DemoComparisonExpression";
import { DemoLessThenExpression } from "../../language/DemoLessThenExpression";
import { DemoGreaterThenExpression } from "../../language/DemoGreaterThenExpression";
import { DemoEqualsExpression } from "../../language/DemoEqualsExpression";
import { DemoFunctionCallExpression } from "../../language/DemoFunctionCallExpression";
import { DemoIfExpression } from "../../language/DemoIfExpression";
import { DemoVariableRef } from "../../language/DemoVariableRef";

export const EXPRESSION_CREATORS: PiExpressionCreator[] = [];

export const BINARY_EXPRESSION_CREATORS: PiBinaryExpressionCreator[] = [];

export const CUSTOM_BEHAVIORS: PiCustomBehavior[] = [
    {
        activeInBoxRoles: ["new-entities"],
        trigger: "entity",
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            var parent: DemoModel = box.element as DemoModel;
            const newentities: DemoEntity = new DemoEntity();
            parent.entities.push(newentities);
            return newentities;
        },
        boxRoleToSelect: "entities-name"
    },
    {
        activeInBoxRoles: ["new-functions"],
        trigger: "function",
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            var parent: DemoModel = box.element as DemoModel;
            const newfunctions: DemoFunction = new DemoFunction();
            parent.functions.push(newfunctions);
            return newfunctions;
        },
        boxRoleToSelect: "functions-name"
    },
    {
        activeInBoxRoles: ["new-attributes"],
        trigger: "attribute",
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            var parent: DemoEntity = box.element as DemoEntity;
            const newattributes: DemoAttribute = new DemoAttribute();
            parent.attributes.push(newattributes);
            return newattributes;
        },
        boxRoleToSelect: "attributes-name"
    },
    {
        activeInBoxRoles: ["new-functions"],
        trigger: "function",
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            var parent: DemoEntity = box.element as DemoEntity;
            const newfunctions: DemoFunction = new DemoFunction();
            parent.functions.push(newfunctions);
            return newfunctions;
        },
        boxRoleToSelect: "functions-name"
    },
    {
        activeInBoxRoles: ["new-parameters"],
        trigger: "var",
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            var parent: DemoFunction = box.element as DemoFunction;
            const newparameters: DemoVariable = new DemoVariable();
            parent.parameters.push(newparameters);
            return newparameters;
        },
        boxRoleToSelect: "parameters-name"
    }
];

export const KEYBOARD: KeyboardShortcutBehavior[] = [
    {
        activeInBoxRoles: ["new-entities"],
        trigger: { meta: MetaKey.None, keyCode: Keys.ENTER },
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): Promise<PiElement> => {
            var parent: DemoModel = box.element as DemoModel;
            const newentities: DemoEntity = new DemoEntity();
            parent.entities.push(newentities);
            return Promise.resolve(newentities);
        },
        boxRoleToSelect: "entities-name"
    },
    {
        activeInBoxRoles: ["new-functions"],
        trigger: { meta: MetaKey.None, keyCode: Keys.ENTER },
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): Promise<PiElement> => {
            var parent: DemoModel = box.element as DemoModel;
            const newfunctions: DemoFunction = new DemoFunction();
            parent.functions.push(newfunctions);
            return Promise.resolve(newfunctions);
        },
        boxRoleToSelect: "functions-name"
    },
    {
        activeInBoxRoles: ["new-attributes"],
        trigger: { meta: MetaKey.None, keyCode: Keys.ENTER },
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): Promise<PiElement> => {
            var parent: DemoEntity = box.element as DemoEntity;
            const newattributes: DemoAttribute = new DemoAttribute();
            parent.attributes.push(newattributes);
            return Promise.resolve(newattributes);
        },
        boxRoleToSelect: "attributes-name"
    },
    {
        activeInBoxRoles: ["new-functions"],
        trigger: { meta: MetaKey.None, keyCode: Keys.ENTER },
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): Promise<PiElement> => {
            var parent: DemoEntity = box.element as DemoEntity;
            const newfunctions: DemoFunction = new DemoFunction();
            parent.functions.push(newfunctions);
            return Promise.resolve(newfunctions);
        },
        boxRoleToSelect: "functions-name"
    },
    {
        activeInBoxRoles: ["new-parameters"],
        trigger: { meta: MetaKey.None, keyCode: Keys.ENTER },
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): Promise<PiElement> => {
            var parent: DemoFunction = box.element as DemoFunction;
            const newparameters: DemoVariable = new DemoVariable();
            parent.parameters.push(newparameters);
            return Promise.resolve(newparameters);
        },
        boxRoleToSelect: "parameters-name"
    }
];
