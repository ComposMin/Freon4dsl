// Generated by the ProjectIt Language Generator.
import { PiProjection, PiElement, Box, VerticalListBox, HorizontalListBox, LabelBox, TextBox } from "@projectit/core";
import { SelectBox, SelectOption } from "@projectit/core";
import { createDefaultExpressionBox, KeyPressAction } from "@projectit/core";
import { DemoAttribute, DemoAttributeType, DemoNumberLiteralExpression, DemoStringLiteralExpression, DemoVariable } from "../language/gen";
import { demoStyles } from "../styles/styles";

export class DemoProjection implements PiProjection {
    rootProjection: PiProjection;

    getBox(element: PiElement): Box {
        if( element instanceof DemoAttribute) {
            return this.getDemoAttributeBox(element)
        }
        if( element instanceof DemoStringLiteralExpression) {
            return this.getDemoStringLiteralExpressionBox(element)
        }
        if( element instanceof DemoNumberLiteralExpression) {
            return this.getDemoNumberLiteralExpressionBox(element)
        }
        // Add any handmade projections of your own before next statement
        if( element instanceof DemoVariable){
            return new VerticalListBox(element, "element", [
                new HorizontalListBox(element, "element-name-list", [
                    new LabelBox(element, "element-name-label", "variable name", {
                        style: demoStyles.propertykeyword
                    }),
                    new TextBox(element, "element-name-text", () => element.name, (c: string) => (element.name = c as string), {
                        placeHolder: "text",
                        style: demoStyles.placeholdertext
                    })
                ])
            ]);
        }
        return null;
    }


    public getDemoAttributeBox(element: DemoAttribute): Box {
        return new VerticalListBox(element, "element", [
            new HorizontalListBox(element, "element-name-list", [
                new LabelBox(element, "element-name-label", "name", {
                    style: demoStyles.propertykeyword
                }),
                new TextBox(element, "element-name-text", () => element.name /*ok*/, (c: string) => (element.name = c), {
                    placeHolder: "text",
                    style: demoStyles.placeholdertext
                })
            ]),
            new HorizontalListBox(element, "element-declaredType-list", [
                new LabelBox(element, "element-declaredType-label", "ype", {
                    style: demoStyles.propertykeyword
                }),
                this.enumSelectForAttType(element, "attribute-type",
                    () => { return { id: element.declaredType.name, label: element.declaredType.name} },
                    (o: SelectOption) => element.declaredType = DemoAttributeType.fromString(o.id)),
            ])
        ]);
    }

    protected enumSelectForAttType(elem: DemoAttribute, role: string, getAction: () => SelectOption, setAction: (o: SelectOption) => void) {
        return new SelectBox(
            elem,
            role,
            "<select type>",
            () => {
                console.log("getOptions: "+ DemoAttributeType.values);
                return DemoAttributeType.values.map(v =>
                    (
                        {
                            id: v.asString(),
                            label: v.asString()
                        }
                    ))
            },
            () => getAction(),
            (option: SelectOption) => {
                console.log("setSelectedOption: " + option);
                setAction(option);
            }
            ,
            { style: demoStyles.function }
        );
    }
    public getDemoStringLiteralExpressionBox(literal: DemoStringLiteralExpression): Box {
        return createDefaultExpressionBox(literal, "string-literal-exp", [
            new HorizontalListBox(literal, "string-literal", [
                new LabelBox(literal, "start-quote", '"', { selectable: false }),
                new TextBox(literal, "string-value", () => literal.value, (v: string) => (literal.value = v), {
                    style: demoStyles.stringLiteral,
                    deleteWhenEmptyAndErase: true
                }),
                new LabelBox(literal, "end-quote", '"', { selectable: false  })
            ])
        ]);
    }

    public getDemoNumberLiteralExpressionBox(exp: DemoNumberLiteralExpression) {
        return createDefaultExpressionBox(exp, "number-literal", [
            new TextBox(exp, "num-literal-value", () => exp.value, (v: string) => (exp.value = v), {
                deleteWhenEmpty: true,
                style: demoStyles.stringLiteral,
                keyPressAction: (currentText: string, key: string, index: number) => {
                    return isNumber(currentText, key, index);
                }
            })
        ]);
    }

}
function isNumber(currentText: string, key: string, index: number): KeyPressAction {
    if (isNaN(Number(key))) {
        if (index === currentText.length) {
            return KeyPressAction.GOTO_NEXT;
        } else {
            return KeyPressAction.NOT_OK;
        }
    } else {
        return KeyPressAction.OK;
    }
}

