// Generated by the ProjectIt Language Generator.
import * as uuid from "uuid";
import { WithType } from "./WithType";
import { LanguageConceptType } from "./Language";
import { model, MobxModelElementImpl } from "@projectit/model";
import { PiElement, PiExpression, PiBinaryExpression } from "@projectit/core";

export class DemoAttributeType extends MobxModelElementImpl implements PiElement, WithType {
    readonly $type: LanguageConceptType = "DemoAttributeType";
    $id: string;

    constructor(id?: string) {
        super();
        if (!!id) {
            this.$id = id;
        } else {
            this.$id = uuid.v4();
        }
    }

    static String: DemoAttributeType = DemoAttributeType.fromString("String");
    static Integer: DemoAttributeType = DemoAttributeType.fromString("Integer");
    static Boolean: DemoAttributeType = DemoAttributeType.fromString("Boolean");
    static ANY: DemoAttributeType = DemoAttributeType.fromString("ANY");

    private readonly literalName: string;

    public asString(): string {
        return this.literalName;
    }

    static fromString(v: string): DemoAttributeType {
        switch (v) {
            case "String":
                if (this.String !== null) {
                    return new DemoAttributeType("String");
                } else {
                    return DemoAttributeType.String;
                }
            case "Integer":
                if (this.Integer !== null) {
                    return new DemoAttributeType("Integer");
                } else {
                    return DemoAttributeType.Integer;
                }
            case "Boolean":
                if (this.Boolean !== null) {
                    return new DemoAttributeType("Boolean");
                } else {
                    return DemoAttributeType.Boolean;
                }
            default:
                if (this.ANY !== null) {
                    return new DemoAttributeType("ANY");
                } else {
                    return DemoAttributeType.ANY;
                }
        }
    }

    get$Type(): LanguageConceptType {
        return this.$type;
    }

    piId(): string {
        return this.$id;
    }

    piIsExpression(): boolean {
        return false;
    }

    piIsBinaryExpression(): boolean {
        return false;
    }
}
