// Generated by the ProjectIt Language Generator.
import { observable } from "mobx";
import * as uuid from "uuid";
import { WithType } from "./WithType";
import { PiElement } from "@projectit/core";
import { model, MobxModelElementImpl } from "@projectit/model";
import { LanguageConceptType } from "./Language";

@model
export class DemoAttributeType extends MobxModelElementImpl implements PiElement, WithType {
    static String : DemoAttributeType = DemoAttributeType.create("String");
    static Integer : DemoAttributeType = DemoAttributeType.create("Integer");
    static Boolean : DemoAttributeType = DemoAttributeType.create("Boolean");
    static Any : DemoAttributeType = DemoAttributeType.create("Any");

    static fromString(v: string): DemoAttributeType {
        if (v === "String") return DemoAttributeType.String;
        if (v === "Integer") return DemoAttributeType.Integer;
        if (v === "Boolean") return DemoAttributeType.Boolean;
        if (v === "Any") return DemoAttributeType.Any;
        console.error("cannot create DemoAttributeType from " + v);
    }
    
    readonly $type: LanguageConceptType = "DemoAttributeType";
    $id: string;

    constructor(id?: string) {
        super();

        if (!!id) {
            this.$id = id;
        } else {
            this.$id = uuid.v4();
        }
    }

    @observable name: string;

    get$Type(): LanguageConceptType {
        return this.$type;
    }

    piId(): string {
        return this.$id;
    }

    piIsExpression(): boolean {
        return false;
    }

    piIsBinaryExpression(): boolean {
        return false;
    }

    static create(name: string): DemoAttributeType {
        const result = new DemoAttributeType();
        result.name = name;
        return result;
    }
}
