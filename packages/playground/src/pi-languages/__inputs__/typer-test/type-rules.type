typer

// What are types?
istype { Type, GenericType, UnitOfMeasurement }

// What are the top and bottom types?
// PredefinedType:ANY is the least specific type
anytype {
    conformsto PredefinedType:ANY;
}

PredefinedType {
    NULL conformsto anytype;
}
// TODO if there is no top of inheritance tree, then we generate one???
// TODO What about number, string, boolean???

// Which type does an expression have?
Exp {
    abstract infertype ; // Every instance that implements Exp has a type
}
SimpleExp1 {
    infertype PredefinedType:Simple1;
}

SimpleExp2 {
    infertype PredefinedType:Simple2;
}

NamedExp {
//    infertype self.myType;
infertype ;
}

PlusExp {
    infertype commonSuperType(self.left, self. right);
}

TypeDeclaration {
    abstract infertype ; // Every instance that implements Exp has a type
}

SimpleType {
    infertype self.type;
}

UnitLiteral {
    // 62 kilogram, or 112 miles
    infertype x:UnitOfMeasurement where {
                  x.baseType equalsto typeOf(self.inner);
                  x.unit equalsto self.unit;
              };
}

GenericLiteral {
    // Set{ 12, 14, 16, 18 }
    infertype x:GenericType where {
        //typeOf(x.innerType) equalsto typeOf(self.content);
        x.innerType equalsto self.content;
        x.kind equalsto self.kind;
    };
}

// Which types are 'equal' to each other?
NamedType {
    equalsto aa:NamedType where {
            aa.naame equalsto self.name;
        };
}

GenericType {
    equalsto x:GenericType where {
            x.innerType equalsto self.innerType;
            x.kind equalsto self.kind;
        };
    conformsto x:GenericType where {
            // both conditions must be true
            self.innerType conformsto x.innerType;
            self.kind conformsto x.kind;
        };
}

GenericKind {
    Set conformsto Collection;
    Sequence conformsto Bag;
    Bag conformsto Collection;
    // Collection;
}

UnitOfMeasurement {
    equalsto aap:UnitOfMeasurement where {
            aap.baseType equalsto self.baseType;
            aap.unit equalsto self.unit;
        };
    conformsto rr:UnitOfMeasurement where {
            self.baseType conformsto rr.baseType;
            self.unit equalsto rr.unit;
        };
}

//OrType { // represents "one of", e.g. string|string[]
//    conformsto rr:OrType where {
//        rr conformsto oneOf(rr.inners)
//    }
//}
//
//anytype {
//    conformsto rr:AndType where {
//        self conformsto allOf(rr.inners)
//    }
//}
//
//AndType { // represents "all of", e.g. Comparable&Serializable
//    conformsto rr:AndType where {
//        rr conformsto allOf(self.inners)
//    }
//}
