language Example

root concept Model {
    name: string;
    entities: Entity[];
    methods: Method[];
}
interface BaseType {
    name: string;
}
interface Type base BaseType {
    reference baseInterface: Entity;
}

concept Entity implements Type {
    attributes: Attribute[];
    entAttributes: AttributeWithEntityType[];
    methods: Method[];
    reference baseEntity: Entity;
}
limited AttributeType implements Type {
    name: string;
    extra: number;
    String = { name: "String", "extra": "199"}
    Integer = { "name": "Integer", "extra": "240261"}
    Boolean = { "name": "Boolean", "extra": "5479"}
    ANY = { "name": "ANY", "extra": "456"}
}
expression AbsExpression base Expression {
    expr: Expression;
}

concept Method {
    name: string;
    reference declaredType : Type;
    expression: Expression;
    parameters: Variable[];
}
concept Attribute {
    reference declaredType: AttributeType;
    name: string;
}

concept AttributeWithEntityType {
    reference declaredType: Entity;
    name: string;
}

concept Variable {
    name: string;
    reference declaredType: Entity;
}

abstract expression Expression {
    appliedfeature?: AppliedFeature;
}

abstract concept AppliedFeature {
    appliedfeature?: AppliedFeature;
}

concept AttributeRef base AppliedFeature {
    reference attribute: AttributeWithEntityType;
}

expression VariableRef base Expression {
    reference variable: Variable;
}



abstract expression LiteralExpression base Expression {}

expression StringLiteralExpression base LiteralExpression {
    value: string;
}

expression NumberLiteralExpression base LiteralExpression {
    value: string; // TODO should be changed to type number
}

expression BooleanLiteralExpression base LiteralExpression {
    value: string; // TODO should be changed to type boolean
}



abstract binary expression BinaryExpression base Expression {
    left: Expression;
    right: Expression;
}

binary expression MultiplyExpression base BinaryExpression {
    priority = 8;
}

binary expression PlusExpression base BinaryExpression {
    priority = 4;
}

binary expression DivideExpression base BinaryExpression {
    priority = 8;
}

binary expression AndExpression base BinaryExpression {
    priority = 1;
}

binary expression OrExpression base BinaryExpression {
    priority = 1;
}

abstract binary expression ComparisonExpression base BinaryExpression {
}

binary expression LessThenExpression base ComparisonExpression {
    priority = 10;
}

binary expression GreaterThenExpression base ComparisonExpression {
    priority = 10;
}

binary expression EqualsExpression base ComparisonExpression {
    priority = 10;
}

expression MethodCallExpression base Expression {
    reference methodDefinition: Method;
}

expression IfExpression base Expression {
    condition: Expression;
    whenTrue: Expression;
    whenFalse: Expression;
}

