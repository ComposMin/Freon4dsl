editor default

boolean [RIGHT | WRONG]

referenceSeparator [.] // is the string that separates the names in a path name, e.g. pack1.cls3.part

Attribute {
    [ ${name} : ${declaredType} ]
}
Entity {
    [
        entity ${name} [? base ${baseEntity}] {
            ${attributes table rows }
            ${methods:name2 vertical }
        }
    ]
    trigger = "entity"
}

ExampleUnit {
        [
        unit ${name} {
            ${entities vertical }
        unit level methods:
            ${methods table rows}
        }
        ]
}

Method {
    [
        method ${name} ( ${parameters table rows} ): ${declaredType} {
            ${body}
        }
    ]
}

Parameter {
    [${name} : ${declaredType}]
}

MethodCallExpression {
    [CALL ${methodDefinition} ( ${args horizontal separator[,] } )]
    referenceShortcut = ${methodDefinition}
    trigger = "method"
}
SumExpression {
    [sum from ${variable} = ${from} to ${to} of ${body}]
    trigger = "sum"
}
GroupedExpression {
    [( ${inner} )]
}
LoopVariableRef {
    [ ${variable} ]
}
LoopVariable {
    [ ${name} ]
    trigger = "var"
}
NumberLiteralExpression {
    [${value}]
}
StringLiteralExpression {
    ['${value}']
    trigger = "'"
}
PlusExpression {
    symbol = "+"
}
MultiplyExpression {
    symbol = "*"
}
DivideExpression {
    symbol = "/"
}
LessThenExpression {
    symbol = "<"
}
OrExpression {
    symbol = "or"
}
AndExpression {
    symbol = "and"
}
GreaterThenExpression {
    symbol = ">"
}
EqualsExpression {
    symbol = "=="
}

BooleanLiteralExpression {
    [ ${value} ]
    trigger = "boolean"
}
AttributeRef {
    [ ${attribute} ]
    trigger = "attribute"
    referenceShortcut = ${attribute}
}

ParameterRef {
    [ xx ${parameter} yy [? . ${appliedfeature}] zz]
    referenceShortcut = ${parameter}
}
IfExpression {
        [
        if (${condition}) then
            ${whenTrue}
        else
            ${whenFalse}
        endif
        ]
    trigger = "if"
}
AbsExpression {
    [ \| ${expr} \| ]
}

//IfExpression {
//        [
//        ${ condition } ? ${ whenTrue } : ${whenFalse}
//        ]
//    trigger = "if"
//}
