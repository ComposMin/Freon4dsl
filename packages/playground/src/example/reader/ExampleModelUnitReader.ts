// Generated by the ProjectIt Language Generator.
import { PiReader } from "@projectit/core";
import {net} from "net.akehurst.language-agl-processor";
import LanguageProcessor = net.akehurst.language.api.processor.LanguageProcessor;
import Agl = net.akehurst.language.agl.processor.Agl;
import AutomatonKind_api = net.akehurst.language.api.processor.AutomatonKind_api;
import { ExampleModelUnitType, ModelUnitMetaType } from "../language/gen";
import { ExModelGrammarStr } from "./ExModelGrammar";
import { ExModelSyntaxAnalyser } from "./ExModelSyntaxAnalyser";

/**
 *   Class ExampleModelUnitReader is a wrapper for the various parsers of
 *   modelunits. It chooses the right parser for the unit based on the metatype, and
 *   shows any syntax errors on the console.
 */
export class ExampleModelUnitReader implements PiReader {
    exModelparser = Agl.processorFromString(ExModelGrammarStr, new ExModelSyntaxAnalyser(), null, null);

    readFromString(sentence: string, metatype: ModelUnitMetaType): ExampleModelUnitType {
        let parser: LanguageProcessor = null;
        // choose the correct parser
        if (metatype === "ExModel") {
            parser = this.exModelparser;
        }

        // parse the input
        let model: ExampleModelUnitType = null;
        try {
            if (parser) {
                let sppt = parser.parse(sentence);
                console.log(sppt);
                let asm = parser.process(null, sentence, AutomatonKind_api.LOOKAHEAD_1);
                // TODO return the asm that is created
                // reset parser
                parser = null;
            } else {
                // TODO give error message
                return null;
            }
        } catch (e) {
            // throw syntax error, but with extra info
            // TODO add file info to error
            // const errorstr = `${!!filepath ? `${filepath}:` : ``} ${e} ${e.location && e.location.start ? `[line ${e.location.start.line}, column ${e.location.start.column}]` : ``}`;
            const errorstr = e.message;
            throw new Error(errorstr);
        }
        return model;
    }
}
