// Generated by the ProjectIt Language Generator.
import { PiError, PiReader } from "@projectit/core";
import { net } from "net.akehurst.language-agl-processor";
import LanguageProcessor = net.akehurst.language.api.processor.LanguageProcessor;
import Agl = net.akehurst.language.agl.processor.Agl;
import AutomatonKind_api = net.akehurst.language.api.processor.AutomatonKind_api;
import { ExampleModelUnitType, ModelUnitMetaType } from "./../language/gen";
import { ExModelGrammarStr } from "./ExModelGrammar";
import { ExModelSyntaxAnalyser } from "./ExModelSyntaxAnalyser";
import { ExampleRefCorrector } from "./ExampleRefCorrector";

/**
 *   Class ExampleModelUnitReader is a wrapper for the various parsers of
 *   modelunits.
 */
export class ExampleModelUnitReader implements PiReader {
    ExModelParser = Agl.processorFromString(ExModelGrammarStr, new ExModelSyntaxAnalyser(), null, null);

    /**
     * Parses and performs a syntax analysis on 'sentence', using the parser and analyser
     * for 'metatype', if available. If 'sentence' is correct, a model unit will be created,
     * otherwise an error wil be thrown containing the parse or analysis error.
     * @param sentence
     * @param metatype
     */
    readFromString(sentence: string, metatype: ModelUnitMetaType): ExampleModelUnitType {
        let parser: LanguageProcessor = null;
        // choose the correct parser
        if (metatype === "ExModel") {
            parser = this.ExModelParser;
        }

        // parse the input
        let model: ExampleModelUnitType = null;
        if (parser) {
            try {
                // NOTE: the following might throw a syntax or analysis error
                let sppt = parser.parse(sentence);
                //console.log("PARSETREE CORRECT!!!! ");
            } catch (e) {
                // strip the error message, otherwise it's too long for the webapp
                let mess = e.message.replace("Could not match goal,", "Parse error");
                throw new Error(mess);
            }
            try {
                let asm = parser.process(null, sentence, AutomatonKind_api.LOOKAHEAD_1);
                // console.log("SYNTAX ANALYSIS CORRECT!!!! ");
                model = asm as ExampleModelUnitType;
            } catch (e) {
                console.log(e.message);
                throw e;
            }
            const corrector = new ExampleRefCorrector();
            corrector.correct(model);
            // reset parser
            parser = null;
        } else {
            throw new Error(`No parser for ${metatype} available: grammar incorrect.`);
        }
        return model;
    }
}
