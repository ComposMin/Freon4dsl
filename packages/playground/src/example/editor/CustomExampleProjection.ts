// Generated by the ProjectIt Language Generator.
import {
    PiProjection,
    PiElement,
    Box,
    createDefaultExpressionBox,
    TextBox,
    KeyPressAction,
    PiLogger, HorizontalListBox, LabelBox, SvgBox, GridCell, AliasBox, styleToCSS, GridBox, PiStyle
} from "@projectit/core";
import { NumberLiteralExpression } from "../language/gen/NumberLiteralExpression";
import { SumExpression } from "../language/gen/SumExpression";
import { mycell, mygrid } from "./styles/styles";

const LOGGER = new PiLogger("CustumProjection");

const sumIcon = "M 6 5 L 6.406531 20.35309 L 194.7323 255.1056 L 4.31761 481.6469 L 3.767654 495.9135 L 373 494 C 376.606 448.306 386.512 401.054 395 356 L 383 353 C 371.817 378.228 363.867 405.207 340 421.958 C 313.834 440.322 279.304 438 249 438 L 79 438 L 252.2885 228.6811 L 96.04328 33.3622 L 187 32.99999 C 245.309 32.99999 328.257 18.91731 351.329 89.00002 C 355.273 100.98 358.007 113.421 359 126 L 372 126 L 362 5 L 6 5 L 6 5 L 6 5 L 6 5 L 6 5 z ";


/**
 * Class CustomExampleProjection provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These custom build additions are merged with the default and definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
export class CustomExampleProjection implements PiProjection {
    rootProjection: PiProjection;
    name: string = "manual";

    constructor(name?: string) {
        if (!!name) {
            this.name = name;
        }
    }

    getBox(element: PiElement): Box {
        // Add any handmade projections of your own before next statement
        if (element instanceof NumberLiteralExpression) {
            return this.getDemoNumberLiteralExpressionBox(element);
        }
        if (element instanceof SumExpression) {
            return this.createSumBox(element);
        }
        return null;
    }

    public getDemoNumberLiteralExpressionBox(exp: NumberLiteralExpression): Box {
        return createDefaultExpressionBox(exp, "number-literal", [
            new TextBox(exp, "NumberLiteralExpression-value", () => exp.value, (v: string) => (exp.value = v), {
                deleteWhenEmpty: true,
                // style: projectitStyles.stringLiteral,
                keyPressAction: (currentText: string, key: string, index: number) => {
                    return isNumber(currentText, key, index);
                }
            })
        ]);
    }

    public createSumBox(sum: SumExpression): Box {
        const cells: GridCell[] = [
            {
                row: 3,
                column: 1,
                columnSpan: 2,
                box: new HorizontalListBox(sum, "Sum-from-part", [
                    this.optionalPartBox(sum, "SumExpression-variable", "variable"),
                    new LabelBox(sum, "sum-from-equals", "="),
                    this.optionalPartBox(sum, "SumExpression-from", "from")
                ]),
                // !!sum.from
                // ? this.rootProjection.getBox(sum.from)
                // : new AliasBox(sum, "sum-from", "[from]", { propertyName: "from" }),
                style: styleToCSS(mycell)
            },
            {
                row: 2,
                column: 1,
                box: new SvgBox(sum, "sum-icon", sumIcon, {
                    width: 50,
                    height: 50,
                    selectable: false
                }),
                style: styleToCSS(mycell)
            },
            {
                row: 1,
                column: 1,
                columnSpan: 2,
                box: this.optionalPartBox(sum, "SumExpression-to", "to"),
                style: styleToCSS(mycell)
            },
            {
                row: 2,
                column: 2,
                box: new HorizontalListBox(sum, "sum-body", [
                    new LabelBox(sum, "sum-body-open", "["),
                    this.optionalPartBox(sum, "SumExpression-body", "body"),
                    new LabelBox(sum, "sum-body-close", "]")
                ]),
                style: styleToCSS(mycell)
            }
        ];
        const result = new GridBox(sum, "sum-all", cells, {
            style: styleToCSS(mygrid)
        });
        return createDefaultExpressionBox(sum, "sum-exp", [result]);
    }


    optionalPartBox(element: PiElement, roleName: string, property: string): Box {
        const projectionToUse = !!this.rootProjection ? this.rootProjection : this;
        return !!element[property]
            ? projectionToUse.getBox(element[property])
            : new AliasBox(element, roleName, "[" + property + "]", { propertyName: property });
    }
}

function isNumber(currentText: string, key: string, index: number): KeyPressAction {
    LOGGER.log("isNumber text [" + currentText + "] key [" + key + "] index [" + index + "]");
    if (isNaN(Number(key))) {
        if (index === currentText.length) {
            return KeyPressAction.GOTO_NEXT;
        } else if (index === 0) {
            return KeyPressAction.GOTO_PREVIOUS;
        } else {
            return KeyPressAction.NOT_OK;
        }
    } else {
        return KeyPressAction.OK;
    }
}

