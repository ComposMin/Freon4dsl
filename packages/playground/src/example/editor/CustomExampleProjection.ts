// Generated by the ProjectIt Language Generator.
import { PiProjection, PiElement, Box, createDefaultExpressionBox, TextBox, KeyPressAction } from "@projectit/core";
import { projectitStyles } from "../../webapp/styles/styles";
import { NumberLiteralExpression } from "../language/gen";
import { ExampleSelectionHelpers } from "./gen/ExampleSelectionHelpers";

/**
 * Class CustomExampleProjection provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These custom build additions are merged with the default and definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */

export class CustomExampleProjection implements PiProjection {
    rootProjection: PiProjection;
    helpers = new ExampleSelectionHelpers();
    name: string = "";

    constructor(name: string) {
        this.name = name;
    }

    getBox(element: PiElement): Box {
        if (element instanceof NumberLiteralExpression) {
            return this.getDemoNumberLiteralExpressionBox(element);
        }

        return null;
    }

    public getDemoNumberLiteralExpressionBox(exp: NumberLiteralExpression) {
        return createDefaultExpressionBox(exp, "number-literal", [
            new TextBox(exp, "num-literal-value", () => exp.value, (v: string) => (exp.value = v), {
                deleteWhenEmpty: true,
                style: projectitStyles.stringLiteral,
                keyPressAction: (currentText: string, key: string, index: number) => {
                    return isNumber(currentText, key, index);
                }
            })
        ]);
    }
}

function isNumber(currentText: string, key: string, index: number): KeyPressAction {
    if (isNaN(Number(key))) {
        if (index === currentText.length) {
            return KeyPressAction.GOTO_NEXT;
        } else {
            return KeyPressAction.NOT_OK;
        }
    } else {
        return KeyPressAction.OK;
    }
}
