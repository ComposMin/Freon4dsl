// this part contains all metamodel elements from the Unified Modeling Language
language octopus

modelunit UmlPart {
    public name: string;
    packages: UmlPackage[];
    associations: Association[];
}

// first, the interfaces
interface IClass base IClassifier {
}

interface IClassifier base IPackagableElement {
    attributes: Attribute[];
    operations: Operation[];
    navigations: AssociationEnd[];
    reference generalizations: IClassifier[];
    reference subClasses: IClassifier[];
    reference interfaces: UmlInterface[];
    states: State[];
    classAttributes: Attribute[];
    classOperations: Operation[];
    isCollectionKind: boolean;
    reference owner: UmlPackage;
    isAbstract: boolean;
    stereotype: string;
}

interface IModelElement {
    name: string;
    pathName: PathName;
}

interface IPackagableElement base IModelElement {
    visibility: VisibilityKind;
}

// second, the metaconcepts
concept Association implements IClassifier {
    end1: AssociationEnd;
    end2: AssociationEnd;
    isClass: boolean;
}

concept AssociationClass base Association implements IClass {
}

concept AssociationEnd base StructuralFeature {
    reference baseType: IClassifier;
    isNavigable: boolean;
    reference myAssociation: Association;
}

concept Attribute base StructuralFeature {
    isOClDef: boolean;
}

concept CollectionType {
    reference elementType: IClassifier;
    metatype: CollectionMetaType;
    isSet: boolean;
    isOrderedSet: boolean;
    isBag: boolean;
    isSequence: boolean;
}

concept DataType implements IClassifier {
}

concept EnumerationType base DataType {
    literals: EnumLiteral[];
}

concept EnumLiteral implements IModelElement {
    reference enumeration: EnumerationType;
}

concept ImportedElement implements IModelElement {
    pathName: PathName;
    element: IModelElement;
    isReference: boolean;
}

concept MultiplicityKind {
    isSingleObject: boolean;
    lowerBound: number;
    upperBound: number;
}

concept OclMessageType implements IClassifier {
    reference referredOperation: Operation;
}

concept Operation implements IPackagableElement {
    parameters: Parameter[];
    reference returnType?: IClassifier;
    reference owner: IClassifier;
    hasClassScope: boolean;
    isOClDef: boolean;
    isAbstract: boolean;
    isInfix: boolean;
    isPrefix: boolean;
}

concept Parameter implements IModelElement {
    reference type: IClassifier;
    reference owner: Operation;
    directionKind: ParameterDirectionKind;
}

concept PrimitiveType base DataType {
}

concept State implements IPackagableElement {
    reference owner: Operation;
    subStates: State[];
    reference enclosingState: State;
}

concept StructuralFeature implements IPackagableElement {
    reference type: IClassifier;
    reference owner: IClassifier;
    multiplicity: MultiplicityKind;
    isOrdered: boolean;
    isDerived: boolean;
    isUnique: boolean;
    isComposite: boolean;
    isAggregate: boolean;
    hasClassScope: boolean;
}

concept TupleType base DataType {
    parts: VariableDeclaration[];
}

// third, implementations of the interfaces, as far as needed
concept UmlPackage implements IModelElement {
    subpackages: UmlPackage[];
    reference parent: UmlPackage;
    reference root: UmlPackage;
    classifiers: IClassifier[];
    interfaces: UmlInterface[];
    associations: Association[];
    imports: ImportedElement[];
}

concept UmlInterface implements IClassifier {
}

concept UmlClass implements IClass {
}

// fourth, the limited types
limited CollectionMetaType {
    COLLECTION 		= { name: "Collection" }
    SET 			= { name: "Set" }
    ORDEREDSET 		= { name: "OrderedSet" }
    BAG 			= { name: "Bag" }
    SEQUENCE 		= { name: "Sequence" }
}

limited OclUsageType {
    WRONGTYPE;
    INV;
    DEF;
    PRE;
    POST;
    INIT;
    DERIVE;
    BODY;
}

limited ParameterDirectionKind {
    IN    = { name: "IN" }
    OUT   = { name: "OUT" }
    INOUT = { name: "INOUT" }
}

limited VisibilityKind {
	PUBLIC = { name: "PUBLIC" }
	PRIVATE = { name: "PRIVATE" }
	PROTECTED = { name: "PROTECTED" }
}
