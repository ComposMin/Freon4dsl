// To add PiPathNames to a language you need:
concept PiPathName {
	names: string[];
	first(): string {
		@behavior return names[0];
	}
	tail(): PiPathName {
		@behavior return names.excluding(first());
	}
	@projection names.first() ["." names.tail()]
}

concept PiNamedElement { // represent either the union or the supertype of any concept in the language that has a name
	name: string;
}

// in any concept that holds PiNamedElements:
concept XXX {
	findPathName(p: PiPathName) : PiNamedElement
	{
		// NOT CORRECT!!
		@behavior {
			if (p.first() === "this") {
				return findPathName(p.tail());
			} else {
				let name : string = p.first();
				let result : PiNamedElement = scoper.getVisibleElements(this).find(name);
				if (result && p.tail()) {
					return result.findPathName(p.tail());
				} else if ({
					return result;
				}
			}
		}
	}

	lookupLocal(p: PiPathName) : PiNamedElement
	findAttribute(name: string) : PiNamedElement
	findPart(name: string) : PiNamedElement
	findReference(name: string) : PiNamedElement

	getPathName() : PiPathName {
		@behavior {
		PiPathName newPath = new PiPathName();
		if (owner != null) {
			newPath = owner.getPathName().getCopy();
			newPath.addString(getName());
		} else {
			newPath = new PiPathName(getName());
		}
		return newPath;
		}
	}
}

