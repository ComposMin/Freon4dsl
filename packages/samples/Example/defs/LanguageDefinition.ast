language Example

model Demo {
    name: identifier;
    units: ExampleUnit[];
}

modelunit ExampleUnit {
    name: identifier;
    entities: Entity[];
    methods: Method[];
    file-extension = "exm";
}
interface Type base BaseType {
}

concept Entity implements Type {
    construc: Method;
    reference listOfReferences: Entity[];
    attributes: Attribute[];
    methods: Method[];
    reference baseEntity?: Entity;
}

concept Method {
    name: identifier;
    reference declaredType : Type;
    body: ExExpression;
    parameters: Parameter[];
}

concept Attribute {
    reference declaredType: Type;
    name: identifier;
}

limited AttributeType implements Type {
    name: identifier;
    extra: number;
    String = { "extra": 199}
    Integer = { "extra": 240261}
    Boolean = { "extra": 5479}
    ANY = { name: "++", "extra": 456}
}

concept Parameter  {
    name: identifier;
    reference declaredType: Type;
}

////////////////////////////////////
//       Expressions
////////////////////////////////////

abstract expression ExExpression {
    appliedfeature?: AppliedFeature;
}

concept AttributeRef base AppliedFeature {
    reference attribute: Attribute;
}

expression ParameterRef base ExExpression {
    reference parameter: Parameter;
}

expression MethodCallExpression base ExExpression {
    reference methodDefinition: Method;
    args: ExExpression[];
}

