language TestParser

// focuses on the different type of properties and how to parse them

// TEST PROPERTIES WITH PRIMITVE TYPES
model TestParserModel {
    name: identifier;
    prim: PrimitivesTest;
    lim: LimitedTest;
    ref: RefsTest;
    primWith: WithKeywordProj;
}

modelunit PrimitivesTest {
    public name: identifier;
    prim: Prim;
    primExtra: PrimExtra;
    primOpt: PrimOptional;
    primExtraOpt: PrimExtraOptional;
    primOptPresent: PrimOptional;
    primExtraOptPresent: PrimExtraOptional;
}
concept Prim {
    primNumber: number;
    primString: string;
    primBoolean: boolean;
    primListNumber: number[];
    primListString: string[];
    primListBoolean: boolean[];
}
concept PrimExtra {
    primNumberWithExtra: number;
    primStringWithExtra: string;
    primBooleanWithExtra: boolean;
    primListNumberWithExtra: number[];
    primListStringWithExtra: string[];
    primListBooleanWithExtra: boolean[];
}
concept PrimOptional {
    primNumber?: number;
    primString?: string;
    primBoolean?: boolean;
    primListNumber?: number[];
    primListString?: string[];
    primListBoolean?: boolean[];
}
concept PrimExtraOptional {
    primNumberWithExtra?: number;
    primStringWithExtra?: string;
    primBooleanWithExtra?: boolean;
    primListNumberWithExtra?: number[];
    primListStringWithExtra?: string[];
    primListBooleanWithExtra?: boolean[];
}

modelunit WithKeywordProj {
    public name: identifier;
    primWith: PrimWith[];
}

concept PrimWith {
    primBoolean: boolean;
}

// TEST PROPERTIES WITH TYPES THTA ARE LIMITED CONCEPTS
modelunit LimitedTest {
    public name: identifier;
    limitedNonOpt: LimitedNonOptional;
    limitedOpt: LimitedOptional;
    limitedOpt2: LimitedOptional;
}

concept LimitedNonOptional {
    visibility: VisibilityKind;
    visMulti: VisibilityKind[];
    visWithExtra: VisibilityKind;
    visMultiWithExtra: VisibilityKind[];
}

concept LimitedOptional {
    visibility?: VisibilityKind;
    visMulti?: VisibilityKind[];
    visWithExtra?: VisibilityKind;
    visMultiWithExtra?: VisibilityKind[];
}

limited VisibilityKind {
	PUBLIC = { name: "PUBLIC" }
	PRIVATE = { name: "PRIVATE" }
	PROTECTED = { name: "PROTECTED" }
}

// TEST PROPERTIES THAT ARE PARTS WHICH HAVE CONCEPT TYPES
modelunit PartsTest {
    public name: identifier;
    directParts: WithDirectParts;
    partsOfParts?: WithSubSubParts;
}

concept WithDirectParts {
    part: PartConcept;
    optPart?: PartConcept;
    partList: PartConcept[];
    optList?: PartConcept[];
}

concept PartConcept {
    visibility: VisibilityKind;
    content: string;
    optContent?: number;
}

concept WithSubSubParts {
    part: SubConcept;
    optPart?: SubConcept;
    partList: SubConcept[];
    optList?: SubConcept[];
}

concept SubConcept {
    normalSub: WithDirectParts;
    optionalSub?: WithDirectParts;
    listSub: WithDirectParts[];
    optListSub?: WithDirectParts[];
}

// TEST PROPERTIES THAT ARE REFERENCES TO CONCEPT TYPES
modelunit RefsTest {
    public name: identifier;
    directRefs: WithDirectRefs;
    indirectRefs?: WithSubSubRefs;
}

concept WithDirectRefs {
    reference ref: RefConcept;
    reference optRef?: RefConcept;
    reference refList: RefConcept[];
    reference optRefList?: RefConcept[];
}

concept RefConcept {
    name: identifier;
}

concept WithSubSubRefs {
    part: WithDirectRefs;
    optPart?: WithDirectRefs;
    partList: WithDirectRefs[];
    optList?: WithDirectRefs[];
}


