language TestCircularImports

// This language is a test for circular imports

model X {
    name: string;
    myA_units: unitA[];
}

// contains only parts
modelunit unitA {
    name: string;
    Apart1: conceptBaseA;
    Apart2: conceptBaseB;
    Apart3: conceptWithInheritanceTree1;
    Apart4: conceptWithInheritanceTree2;
    Apart5: conceptWithInheritanceTree3;
    Apart6: conceptBaseA2;
}

concept conceptWithInheritanceTree1 base conceptBaseA {
}

concept conceptWithInheritanceTree2 base conceptBaseB {
}

concept conceptWithInheritanceTree3 base conceptBaseA2 {
}

concept conceptBaseA2 base conceptA  {
}

concept conceptBaseA base conceptA {
}

concept conceptBaseB base conceptB {
}

concept conceptA {
    name: string;
    // the possibilities for primitive properties
    conceptProp1: string;
    conceptProp2: string[];
    conceptProp3: number;
    conceptProp4: number[];
    conceptProp5: boolean;
    conceptProp6: boolean[];
}

concept conceptB {
    name: string;
    // properties with concept as type
    conceptProp7: conceptBaseA2;
    conceptProp8: conceptBaseA2[];
    reference conceptProp9: conceptBaseA2;
    reference conceptProp10: conceptBaseA2[];
}

