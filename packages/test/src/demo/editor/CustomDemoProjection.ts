// Generated by the ProjectIt Language Generator.
import {
    PiProjection,
    PiElement,
    Box,
    createDefaultExpressionBox,
    KeyPressAction,
    TextBox, BoxFactory, PiTableDefinition, PiCompositeProjection
} from "@projectit/core";
import { DemoNumberLiteralExpression } from "../language/gen";

export class CustomDemoProjection implements PiProjection {
    rootProjection: PiCompositeProjection;
    name: string = "manual";

    constructor(name?: string) {
        if (!!name) {
            this.name = name;
        }
    }

    getBox(element: PiElement): Box {
        if (element instanceof DemoNumberLiteralExpression) {
            return this.getDemoNumberLiteralExpressionBox(element);
        }

        return null;
    }


    getTableDefinition(conceptName: string): PiTableDefinition {
        // Add any handmade table cells of your own before next statement
        return null;
    }

    public getDemoNumberLiteralExpressionBox(exp: DemoNumberLiteralExpression) {
        return createDefaultExpressionBox(exp, "number-literal", [
            BoxFactory.text(exp, "num-literal-value", () => exp.value.toString(), (v: string) => (exp.value = Number.parseInt(v)), {
                deleteWhenEmpty: true,
                keyPressAction: (currentText: string, key: string, index: number) => {
                    return isNumber(currentText, key, index);
                }
            })
        ]);
    }
}

function isNumber(currentText: string, key: string, index: number): KeyPressAction {
    if (isNaN(Number(key))) {
        if (index === currentText.length) {
            return KeyPressAction.GOTO_NEXT;
        } else {
            return KeyPressAction.NOT_OK;
        }
    } else {
        return KeyPressAction.OK;
    }
}
