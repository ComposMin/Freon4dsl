validator Demo for language Demo

DemoModel {
    notEmpty self.entities;
    isunique name in self.entities;
    notEmpty self.functions;
    isunique name in self.functions;
    validIdentifier; // default is 'name'
}

DemoEntity {
    notEmpty self.attributes;
    isunique name in self.attributes;
    notEmpty self.functions;
    isunique name in self.functions;
    validIdentifier    {
                       message:
                       "iets met ${self.name} enzo",
                       severity: ToDo
                       };
}

DemoAttribute {
    validIdentifier self.name
    {severity: TODO,
    message:
    "iets met ${self.name} enzo"
    };
}

DemoFunction {
    typecheck conformsTo (self.expression, self.declaredType);
    isunique name in self.parameters         {severity: error
                                             };
    validIdentifier;
}

DemoVariable {
    validIdentifier     {
                        message:
                        "iets met ${self.name} enzo"
                        };
}

DemoAbsExpression {
    typecheck equalsType( self.expr, DemoAttributeType:Integer );
}

DemoMultiplyExpression {
    typecheck equalsType( self.left, DemoAttributeType:Integer );
    typecheck equalsType( self.right, DemoAttributeType:Integer );
}

DemoPlusExpression {
    typecheck equalsType( self.left, DemoAttributeType:Integer );
    typecheck equalsType( self.right, DemoAttributeType:Integer );
    typecheck conformsTo( self.left, self.right );
}

DemoDivideExpression {
    typecheck equalsType( self.left, DemoAttributeType:Integer );
    typecheck equalsType( self.right, DemoAttributeType:Integer );
}

DemoAndExpression {
    typecheck equalsType( self.left, DemoAttributeType:Boolean );
    typecheck equalsType( self.right, DemoAttributeType:Boolean );
}

DemoOrExpression {
    typecheck equalsType( self.left, DemoAttributeType:Boolean );
    typecheck equalsType( self.right, DemoAttributeType:Boolean );
}

DemoComparisonExpression {
    typecheck equalsType( self.left, self.right );
}

DemoIfExpression {
    typecheck equalsType( self.condition, DemoAttributeType:Boolean );
    typecheck conformsTo( self.whenTrue, self.whenFalse );
}

