// Generated by the ProjectIt Language Generator.
import { PiTyperPart } from "@projectit/core";
import { DemoEntity, DemoEveryConcept } from "../language/gen";
import { DemoEnvironment } from "../environment/gen/DemoEnvironment";

/**
 * Class 'CustomDemoTyperPart' is meant to be a convient place to add any
 * custom code for type checking.
 */
export class CustomDemoTyperPart implements PiTyperPart {
    /**
     * See interface
     */
    public inferType(modelelement: DemoEveryConcept): DemoEveryConcept | null {
        return null;
    }
    /**
     * See interface
     */
    public equalsType(elem1: DemoEveryConcept, elem2: DemoEveryConcept): boolean | null {
        return null;
    }
    /**
     * See interface
     */
    public conformsTo(elem1: DemoEveryConcept, elem2: DemoEveryConcept): boolean | null {
        return null;
    }
    /**
     * See interface
     */
    public conformList(typelist1: DemoEveryConcept[], typelist2: DemoEveryConcept[]): boolean | null {
        // console.log(`Third level is called, length: ${typelist1.length}, kind: ${typelist1[0].piLanguageConcept()}`);
        if (typelist1.length > 0 && (typelist1[0] instanceof DemoEntity)) {
            if (typelist1.length !== typelist2.length) {
                return false;
            }
            let result: boolean = true;
            const maxLength = typelist1.length;
            for (let i = 0; i < maxLength; i++) {
                result = DemoEnvironment.getInstance().typer.conformsTo(typelist1[i], typelist2[maxLength - i - 1]);
                // console.log(`comparing typelist1[${i}]: ${typelist1[i].piId()} with typelist2[${maxLength - i - 1}]: ${typelist2[maxLength - i -1].piId()}`);
                if (result === false) {
                    return result;
                }
            }
            return result;
        } else {
            return null;
        }
    }
    /**
     * See interface
     */
    public isType(elem: DemoEveryConcept): boolean | null {
        return null;
    }
}
