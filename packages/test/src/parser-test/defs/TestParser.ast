language TestParser

// focuses on the different type of properties and how to parse them

model TestParserModel {
    name: string;
    prim: PrimitivesTest;
//    lim: LimitedTest;
}

modelunit PrimitivesTest {
    public name: string;
    prim: Prim;
    primExtra: PrimExtra;
    primOpt: PrimOptional;
    primExtraOpt: PrimExtraOptional;
    primOptPresent: PrimOptional;
    primExtraOptPresent: PrimExtraOptional;
}
concept Prim {
    primNumber: number;
    primString: string;
    primBoolean: boolean;
    primListNumber: number[];
    primListString: string[];
    primListBoolean: boolean[];
}
concept PrimExtra {
    primNumberWithExtra: number;
    primStringWithExtra: string;
    primBooleanWithExtra: boolean;
    primListNumberWithExtra: number[];
    primListStringWithExtra: string[];
    primListBooleanWithExtra: boolean[];
}
concept PrimOptional {
    primNumber?: number;
    primString?: string;
    primBoolean?: boolean;
    primListNumber?: number[];
    primListString?: string[];
    primListBoolean?: boolean[];
}
concept PrimExtraOptional {
    primNumberWithExtra?: number;
    primStringWithExtra?: string;
    primBooleanWithExtra?: boolean;
    primListNumberWithExtra?: number[];
    primListStringWithExtra?: string[];
    primListBooleanWithExtra?: boolean[];
}

modelunit LimitedTest {
    public name: string;
    limitedNonOpt: LimitedNonOptional;
    limitedOpt: LimitedOptional;
    limitedOpt2: LimitedOptional;
}

concept LimitedNonOptional {
    visibility: VisibilityKind;
    visMulti: VisibilityKind[];
    visWithExtra: VisibilityKind;
    visMultiWithExtra: VisibilityKind[];
}

concept LimitedOptional {
    visibility?: VisibilityKind;
    visMulti?: VisibilityKind[];
    visWithExtra?: VisibilityKind;
    visMultiWithExtra?: VisibilityKind[];
}

limited VisibilityKind {
	PUBLIC = { name: "PUBLIC" }
	PRIVATE = { name: "PRIVATE" }
	PROTECTED = { name: "PROTECTED" }
}
