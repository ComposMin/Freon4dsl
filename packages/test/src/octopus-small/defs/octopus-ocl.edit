editor XXX for language octopus

AssociationClassCallExp {
@projection normal
    [${self.referredAssociationClass}]
}

AssociationEndCallExp {
@projection normal
    [${self.referredAssociationEnd}]
}

AttributeCallExp {
    @projection normal
        [${self.referredAttribute}]
}

BooleanLiteralExp {
@projection normal
    [${self.value}]
}

CollectionItem {
@projection normal
    [${self.item}]
}

CollectionLiteralExp {
@projection normal
    [Collection { ${self.parts @horizontal @separator[, ]} }]
}

//CollectionLiteralPart {
//@projection normal
//    []}

CollectionRange {
@projection normal
    [${self.first} .. ${self.last}]
}

EnumLiteralExp {
@projection normal
    [${self.referredEnumLiteral}]
}

IfExp {
@projection normal
    [if ${self.condition} then ${self.ifExpression} [?else ${self.elseExpression}] endif]
}

IntegerLiteralExp {
@projection normal
    [${self.value}]
}

//IterateExp {
//@projection normal
//    [${self.result}
//}
//
//IteratorExp {
//@projection normal
//    [${self.reference}]
//}

LetExp {
@projection normal
    [let ${self.variables @horizontal @separator[, ]}
    in ${self.inExpression}
    ]
}

//ModelPropertyCallExp {
//@projection normal
//    []
//}

NavigationCallExp {
@projection normal
    [${self.navigationSource}]
}

//NumericLiteralExp {
//@projection normal
//    []}

OclMessageExp {
@projection normal
    [<${self.target}>^^${self.calledOperation}( ${self.args @horizontal @separator[, ]} )]
}

OclStateLiteralExp {
@projection normal
    [${self.referredState}]
}

OclTypeLiteralExp {
@projection normal
    [${self.referredClassifier}]
}

OclUndefinedLiteralExp {
@projection normal
    [${self.value}]
}

OperationCallExp {
@projection normal
    [${self.referredOperation} ( ${self.args @horizontal @separator[, ]} )]
}

//PrimitiveLiteralExp {
//}

RealLiteralExp {
@projection normal
    [${self.value}]
}

StringLiteralExp {
@projection normal
    [${self.value}]
}

TupleLiteralExp {
@projection normal
// TODO add extra check on .edit file: @horizontal should be within brackets of a list
    [Tuple { ${self.tupleParts @horizontal @separator[, ] } }]
}

//UnspecifiedValueExp {
//}

VariableDeclaration {
@projection normal
    [$self.name} : ${self.type.name} [?= ${self.initExpression}]]
//    isIteratorVar: boolean;
}

VariableExp {
@projection normal
    [${self.referredVariable}]
}
OclExpression {
    @projection normal
        [${self.appliedProperty}]
}
