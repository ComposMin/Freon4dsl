language octopus

model OctopusModel {
    name: identifier;
    umlParts: UmlPackage[];
//    oclParts: OclPart[];
}

//modelunit OclPart {
//    public name: string;
//}
concept Operation implements IPackagableElement {
    parameters: Parameter[];
    reference returnType?: IClassifier;
//    reference owner: IClassifier;
//    hasClassScope: boolean;
//    isOClDef: boolean;
//    isAbstract: boolean;
//    isInfix: boolean;
//    isPrefix: boolean;
//    pre?: OclPreStatement[];
//    post?: OclPostStatement[];
}
modelunit UmlPackage implements IModelElement {
//    subpackages: UmlPackage[];
//    reference parent: UmlPackage;
//    reference root: UmlPackage;
    classifiers: IClassifier[];
//    interfaces: UmlInterface[];
//    associations: Association[];
//    imports: ImportedElement[];
}
concept Parameter implements IModelElement {
    reference type: IClassifier;
//    reference owner: Operation;
    directionKind: ParameterDirectionKind;
}
//concept PathName {
//    names: identifier[];
//    // first = names[0];
//    // last  = names[names.length-1]
//}
interface IModelElement {
    public name: identifier;
//    pathName: PathName;
}
interface IClassifier base IPackagableElement {
    attributes: Attribute[];
    operations: Operation[];
//    navigations: AssociationEnd[];
//    reference generalizations: IClassifier[];
//    subClasses: IClassifier[];
//    reference interfaces: UmlInterface[];
//    states: State[];
//    classAttributes: Attribute[];
//    classOperations: Operation[];
//    isCollectionKind: boolean;
//    reference owner: UmlPackage;
//    isAbstract: boolean;
//    stereotype: string;
}
interface IPackagableElement base IModelElement {
    visibility: VisibilityKind;
}
interface IClass base IClassifier {
}
//concept DataType implements IClassifier {
//}
//concept UmlInterface implements IClassifier {
//}
//concept Association implements IClassifier {
////    end1: AssociationEnd;
////    end2: AssociationEnd;
////    isClass: boolean;
//}
concept UmlClass implements IClass {
}
//concept AssociationClass base Association implements IClass {
//}
concept Attribute base StructuralFeature {
    isOClDef: boolean;
}
concept StructuralFeature implements IPackagableElement {
    reference type: IClassifier;
//    reference owner: IClassifier;
    multiplicity: MultiplicityKind;
//    isOrdered: boolean;
//    isDerived: boolean;
//    isUnique: boolean;
//    isComposite: boolean;
//    isAggregate: boolean;
//    hasClassScope: boolean;
}
concept MultiplicityKind {
//    isSingleObject: boolean;
    lowerBound: number;
    upperBound: number;
}

limited ParameterDirectionKind {
    IN    = { name: "IN" }
    OUT   = { name: "OUT" }
    INOUT = { name: "INOUT" }
}

limited VisibilityKind {
	PUBLIC = { name: "public" }
	PRIVATE = { name: "private" }
	PROTECTED = { name: "protected" }
}
