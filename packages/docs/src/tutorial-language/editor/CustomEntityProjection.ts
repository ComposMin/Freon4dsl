// Generated by the ProjectIt Language Generator.
import { PiProjection, PiElement, Box, HorizontalListBox, LabelBox, TextBox, VerticalListBox } from "@projectit/core";
import { DemoModelUnit } from "../../../dist/docs/src/tutorial-language/language/gen/DemoEveryConcept";
import { AttributeWithLimitedType } from "../language/gen/AttributeWithLimitedType";
import { Entity } from "../language/gen/Entity";
import { EntityModel } from "../language/gen/EntityModel";
import { EntityModelUnit } from "../language/gen/EntityModelUnit";

import { projectitStyles } from "./styles/styles";
/**
 * Class CustomEntityProjection provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These custom build additions are merged with the default and definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */

export class CustomEntityProjection implements PiProjection {
    rootProjection: PiProjection;
    name: string = "manual";

    constructor(name?: string) {
        if (!!name) {
            this.name = name;
        }
    }

    getBox(element: PiElement): Box {
        // Add any handmade projections of your own before next statement
        return null;
    }

    // Most simple model box
    // tag::ModelBox1[]
    private createModelBox(model: EntityModelUnit): Box {
        return new HorizontalListBox(model, "model", [
            new LabelBox(model, "model-label", "Model"),
            new TextBox(model, "model-name", () => model.name, (c: string) => (model.name = c))
        ]);
    }
    // end::ModelBox1[]

    // Modelbox with style added
    // tag::ModelBox2[]
    private createModelBox2(model: EntityModelUnit): Box {
        return new HorizontalListBox(model, "model", [
            new LabelBox(model, "model-label", "Model", {
                style: projectitStyles.keyword
            }),
            new TextBox(model, "model-name", () => model.name, (c: string) => (model.name = c), {
                placeHolder: "<name>"
            })
        ]);
    }
    // end::ModelBox2[]

    // ModelBox with placeholder for the name and a list of entities
    // tag::ModelBox3[]
    private createModelBox3(model: DemoModelUnit): Box {
        return new VerticalListBox(model, "model", [
            new HorizontalListBox(model, "model-info", [
                new LabelBox(model, "model-keyword", "Model", {
                    style: projectitStyles.keyword
                }),
                new TextBox(model, "model-name", () => model.name, (c: string) => (model.name = c), {
                    placeHolder: "<name>"
                })
            ]),
            new LabelBox(model, "entity-keyword", "Entities", {
                style: projectitStyles.keyword
            }),
            new VerticalListBox(
                model,
                "entity-list",
                model.entities.map(ent => {
                    return this.rootProjection.getBox(ent);
                })
            )
        ]);
    }
    // end::ModelBox3[]

    private createEntityBox1(entity: Entity): Box {
        // tag::EntityBox[]
        return new VerticalListBox(entity, "entity", [
            new HorizontalListBox(entity, "entity-keyword", [
                new LabelBox(entity, "entity-label", "entity", {
                    style: projectitStyles.keyword
                }),
                new TextBox(entity, "entity-name", () => entity.name, (c: string) => (entity.name = c))
            ]),
            new VerticalListBox(
                entity,
                "attributes",
                entity.attributes.map(att => {
                    return this.rootProjection.getBox(att);
                })
            )
        ]);
        // end::EntityBox1[]
    }

    // EntityBox with attributes, but no AliasBox
    // tag::EntityBox[]
    private createEntityBox(entity: Entity): Box {
        return new VerticalListBox(entity,"entity",
            [
                new HorizontalListBox(entity, "entity-info", [
                    new LabelBox(entity, "entity-keyword", "Entity", {
                        style: projectitStyles.keyword
                    }),
                    new TextBox(entity, "entity-name", () => entity.name, (c: string) => (entity.name = c), {
                        placeHolder: "<name>"
                    })
                ]),
                new VerticalListBox( entity, "attribute-list",
                    entity.attributes.map(att => {
                        return this.rootProjection.getBox(att);
                    })
                )
            ],
            { style: projectitStyles.indent }
        );
    }
    // end::EntityBox[]

    // tag::AttributeBox[]
    private createAttributeBox(att: AttributeWithLimitedType): Box {
        return new HorizontalListBox(
            att,
            "attribute",
            [
                new TextBox(att,"attribute-name",
                    () => { return att.name; },
                    (v: string) => { att.name = v; }
                ),
                new LabelBox(att, "colon", ":"),
                new TextBox(att,"attribute-type",
                    () => { return att.type; },
                    (v: string) => { att.type = v as AttributeWithLimitedType; }
                )
            ],
            { style: demoStyles.indent }
        );
    }
    // end::AttributeBox[]
}
