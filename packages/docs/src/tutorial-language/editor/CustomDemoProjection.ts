// Generated by the ProjectIt Language Generator.
import { PiProjection, PiElement, Box, VerticalListBox, HorizontalListBox, LabelBox, TextBox, AliasBox } from "@projectit/core";
import { DemoAttributeWithLimitedType, DemoAttributeType, DemoModel, DemoEntity, DemoFunction, DemoVariable, PiElementReference } from "../language/gen";
import { projectitStyles } from "./styles/styles";
import { DemoStdlib } from "../stdlib/gen/DemoStdlib";
// TODO change import to @project/core
import { PiLogger } from "../../../../core/src/util/PiLogging";

const LOGGER = new PiLogger("CustomDemoProjection");//.mute();
/**
 * Class CustomDemoProjection provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These custom build additions are merged with the default and definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */

export class CustomDemoProjection implements PiProjection {
    rootProjection: PiProjection;
    name: string = "manual";

    constructor(name?: string) {
        if (!!name) {
            this.name = name;
        }
    }

    getBox(element: PiElement): Box {
        LOGGER.log("TutorialProjection.getBox [" + element + "]");
        if (element === null || element === undefined) {
            LOGGER.error(this, "BOX OF NULL/UNDEFINED element [" + element + "]");
            return null;
        }
        // if (element instanceof DemoStringLiteralExpression) {
        //     return this.createStringLiteralBox(element);
        // } else if (element instanceof DemoNumberLiteralExpression) {
        //     return this.createNumberLiteralBox(element);
        // } else if (element instanceof DemoPlusExpression) {
        //     return this.createPlusBox(element);
        // } else if (element instanceof DemoMultiplyExpression) {
        //     return this.createMultiplyBox(element);
        // } else if (element instanceof DemoAndExpression) {
        //     return this.createAndBox(element);
        // } else if (element instanceof DemoOrExpression) {
        //     return this.createOrBox(element);
        // } else if (element instanceof DemoDivideExpression) {
        //     return this.createDivideBox(element);
        // } else if (element instanceof CoretestComparisonExpression) {
        //     return this.createComparisonBox(element);
        // } else if (element instanceof DemoPlaceholderExpression) {
        //     return this.createPlaceholderBox(element);
        // } else if (element instanceof DemoSumExpression) {
        //     return this.createSumBox(element);
        // } else if (isPiBinaryExpression(element)) {
        //     return this.createBinaryBox(element);
        // } else

        if (element instanceof DemoFunction) {
            return this.createFunctionBox(element);
        } else if (element instanceof DemoEntity) {
            return this.createEntityBox(element);
        } else if (element instanceof DemoModel) {
            // return this.createDemoModelBox1(exp);
            // return this.createDemoModelBox2(exp);
            // return this.createDemoModelBox3(exp);
            LOGGER.log("Calling projection for DemoModel");
            return this.createDemoModelBox4(element);
        } else if (element instanceof DemoAttributeWithLimitedType) {
            return this.createAttributeBox(element);
        }

        // Add any handmade projections of your own before next statement
        return null;
    }

    // Most simple model box
    // tag::DemoModelBox1[]
    private createDemoModelBox(model: DemoModel): Box {
        return new HorizontalListBox(model, "model", [
            new LabelBox(model, "model-label", "DemoModel"),
            new TextBox(model, "model-unitName", () => model.name, (c: string) => (model.name = c))
        ]);
    }

    // end::DemoModelBox1[]

    // Modelbox with style and placeholder added
    // tag::DemoModelBox2[]
    private createDemoModelBox2(model: DemoModel): Box {
        return new HorizontalListBox(model, "model", [
            new LabelBox(model, "model-label", "Model", {
                style: projectitStyles.keyword
            }),
            new TextBox(model, "model-unitName", () => model.name, (c: string) => (model.name = c), {
                placeHolder: "<unitName>"
            })
        ]);
    }

    // end::DemoModelBox2[]

    // DemoModelBox with placeholder for the unitName and a list of entities
    // tag::DemoModelBox3[]
    private createDemoModelBox3(model: DemoModel): Box {
        return new VerticalListBox(model, "model", [
            // end::DemoModelBox3[]
            new HorizontalListBox(model, "model-info", [
                new LabelBox(model, "model-keyword", "Model", {
                    style: projectitStyles.keyword
                }),
                new TextBox(model, "model-unitName", () => model.name, (c: string) => (model.name = c), {
                    placeHolder: "<unitName>"
                })
            ]),
            // tag::DemoModelBox3[]
            new LabelBox(model, "entity-keyword", "Entities", {
                style: projectitStyles.keyword
            }),
            new VerticalListBox(
                model,
                "entity-list",
                model.entities.map(ent => {
                    return this.createEntityBox(ent);
                })
            )
        ]);
    }

    // end::DemoModelBox3[]

    // DemoModelBox with placeholder for the unitName and a list of entities
    // tag::DemoModelBox4[]
    private createDemoModelBox4(model: DemoModel): Box {
        LOGGER.log("createDemoModelBox4 [" + model + "]");
        return new VerticalListBox(model, "model", [
            new HorizontalListBox(model, "model-info", [
                new LabelBox(model, "model-keyword", "DemoModel", {
                    style: projectitStyles.keyword
                }),
                new TextBox(model, "model-unitName", () => model.name, (c: string) => (model.name = c), {
                    placeHolder: "<unitName>"
                })
            ]),
            new LabelBox(model, "entity-list", "Entities", {
                style: projectitStyles.keyword
            }),
            new VerticalListBox(
                model,
                "entities",
                model.entities.map(ent => {
                    return this.createEntityBox3(ent);
                })

            ).addChild(new AliasBox(model, "end-of-entity-list",
                "add entity", { style: projectitStyles.indent })),        // <1>
            new LabelBox(model, "functions-list", "Functions", {
                style: projectitStyles.keyword
            }),
            // tag::CreateFunctionAction[]
            new VerticalListBox(
                model,
                "functions",
                model.functions.map(fun => {
                    return this.createFunctionBox(fun);
                })

            )
            // .addChild(new AliasBox(model, "end-of-function-list",
            // "add function", { style: projectitStyles.indent }))
            // end::CreateFunctionAction[]
        ]);
    }

    // end::DemoModelBox4[]

    // tag::AttributeBox[]
    private createAttributeBox(att: DemoAttributeWithLimitedType): Box {
        return new HorizontalListBox(
            att,
            "attribute",
            [
                new TextBox(att, "attribute-unitName",
                    () => {
                        return att.name;
                    },
                    (v: string) => {
                        att.name = v;
                    }
                ),
                new LabelBox(att, "colon", ":"),
                new TextBox(att, "attribute-type",
                    () => {
                        return att.declaredType.referred.name;
                    },
                    (v: string) => {
                        let myType = DemoStdlib.getInstance().elements.find(elem => elem.name === v);
                        if (myType instanceof DemoAttributeType) {
                            att.declaredType = PiElementReference.create<DemoAttributeType>(myType, "DemoAttributeType");
                        } else {
                            // TODO error
                        }
                    }
                )
            ],
            { style: projectitStyles.indent }
        );
    }
    // end::AttributeBox[]

    private createEntityBox1(entity: DemoEntity): Box {
        // tag::EntityBox1[]
        return new VerticalListBox(entity, "entity", [
            new HorizontalListBox(entity, "entity-keyword", [
                new LabelBox(entity, "entity-label", "entity", {
                    style: projectitStyles.keyword
                }),
                new TextBox(entity, "entity-unitName", () => entity.name, (c: string) => (entity.name = c))
            ]),
            new VerticalListBox(
                entity,
                "attributes",
                entity.attributes.map(att => {
                    return this.createAttributeBox(att);
                })
            )
        ]);
        // end::EntityBox1[]
    }

    // EntityBox with attributes, but no AliasBox
    // tag::EntityBox[]
    private createEntityBox(entity: DemoEntity): Box {
        return new VerticalListBox(entity, "entity",
            [
                new HorizontalListBox(entity, "entity-info", [
                    new LabelBox(entity, "entity-keyword", "Entity", {
                        style: projectitStyles.keyword
                    }),
                    new TextBox(entity, "entity-unitName", () => entity.name, (c: string) => (entity.name = c), {
                        placeHolder: "<unitName>"
                    })
                ]),
                new VerticalListBox(entity, "attribute-list",
                    entity.attributes.map(att => {
                        return this.createAttributeBox(att);
                    })
                )
            ],
            { style: projectitStyles.indent }
        );
    }

    // end::EntityBox[]

    // EntityBox with AliasBox added for adding new attributes
    private createEntityBox3(entity: DemoEntity): Box {
        return new VerticalListBox(
            entity,
            "entity",
            [
                new HorizontalListBox(entity, "entity-keyword", [
                    new LabelBox(entity, "entity-label", "entity", {
                        style: projectitStyles.keyword
                    }),
                    new TextBox(entity, "entity-unitName", () => entity.name, (c: string) => (entity.name = c))
                ]),
                // tag::CreateAttributeAction[]
                new VerticalListBox(entity, "attributes",
                    entity.attributes.map(att => {
                        return this.createAttributeBox(att);
                    })
                ).addChild(new AliasBox(entity, "end-of-attribute-list",
                    "add attribute", { style: projectitStyles.indent }))
                // end::CreateAttributeAction[]
            ],
            {
                style: projectitStyles.indent
            }
        );
    }

    private createFunctionBox(fun: DemoFunction): Box {
        return new VerticalListBox(
            fun,
            "function",
            [
                new HorizontalListBox(fun, "fun-keyword", [
                    new LabelBox(fun, "fun-label", "function", {
                        style: projectitStyles.keyword
                    }),
                    new TextBox(fun, "fun-unitName", () => fun.name, (c: string) => (fun.name = c))
                ]),
                // tag::CreateAttributeAction[]
                new VerticalListBox(fun, "parameters",
                    fun.parameters.map(att => {
                        return this.createParameterBox(att);
                    })
                ).addChild(new AliasBox(fun, "end-of-parameter-list",
                    "add parameter", { style: projectitStyles.indent }))
                // end::CreateAttributeAction[]
            ],
            {
                style: projectitStyles.indent
            }
        );
    }

    private createParameterBox(parameter: DemoVariable): Box {
        return new HorizontalListBox(
            parameter,
            "parameter",
            [
                new TextBox(parameter, "parameter-unitName",
                    () => {
                        return parameter.name;
                    },
                    (v: string) => {
                        parameter.name = v;
                    }
                ),
                new LabelBox(parameter, "colon", ":"),
                new TextBox(parameter, "parameter-type",
                    () => {
                        return parameter.declaredType.referred.name;
                    },
                    (v: string) => {
                        // parameter.type = DemoAttributeType.fromString(v);
                    }
                )
            ],
            { style: projectitStyles.indent }
        );
    }
}
