validator Demo for language Demo

// tag::value[]
DemoAttributeType  {
	self.extra >= 12;
	self.extra <= 30;
}
// end::value[]

// tag::lists[]
DemoModel {
    notEmpty self.entities;
    isunique name in self.entities;
 // end::lists[]
    notEmpty self.functions;
    isunique name in self.functions;
    validIdentifier; // default is 'name'
// tag::lists[]
}
// end::lists[]

DemoEntity {
    notEmpty self.attributes;
    isunique name in self.attributes;
    notEmpty self.functions;
    isunique name in self.functions;
    validIdentifier;
}
// tag::valididentifier[]
DemoAttributeWithLimitedType {
    validIdentifier self.name;
}
DemoVariable {
    validIdentifier; // default is 'name'
}
// end::valididentifier[]

DemoFunction {
    typecheck conformsTo (self.expression, self.declaredType);
    isunique name in self.parameters;
    validIdentifier ;
}


DemoAbsExpression {
    typecheck equalsType( self.expr, DemoAttributeType:Integer );
}


// tag::typecheck[]
DemoMultiplyExpression {
    typecheck equalsType( self.left, DemoAttributeType:Integer );
    typecheck equalsType( self.right, DemoAttributeType:Integer );
    typecheck conformsTo( self.left, self.right );
}
// end::typecheck[]

DemoPlusExpression {
    typecheck equalsType( self.left, DemoAttributeType:Integer );
    typecheck equalsType( self.right, DemoAttributeType:Integer );
    typecheck conformsTo( self.left, self.right );
}

DemoDivideExpression {
    typecheck equalsType( self.left, DemoAttributeType:Integer );
    typecheck equalsType( self.right, DemoAttributeType:Integer );
}

DemoAndExpression {
    typecheck equalsType( self.left, DemoAttributeType:Boolean );
    typecheck equalsType( self.right, DemoAttributeType:Boolean );
}

DemoOrExpression {
    typecheck equalsType( self.left, DemoAttributeType:Boolean );
    typecheck equalsType( self.right, DemoAttributeType:Boolean );
}

DemoComparisonExpression {
    typecheck equalsType( self.left, self.right );
}

DemoIfExpression {
    typecheck equalsType( self.condition, DemoAttributeType:Boolean );
    typecheck conformsTo( self.whenTrue, self.whenFalse );
}

