editor StartEditor for language Demo

// tag::literal[]
DemoText {
    @projection
        [This is
                literal text
         that is projected in the

                editor
        for every concept of type DemoText.]
}
// end::literal[]
// tag::projection[]
DemoNumberLiteralExpression {
    @projection normal
        [${self.value}]
}
// end::projection[]
// tag::indentation[]
DemoStringLiteralExpression {
// in this projection the indentation is not taken into account
    @projection DemoStringLiteralExpression
        [
        '${self.value}'
        ]
    @trigger "'"
}
DemoAttributeWithLimitedType {
// in this projection the indentation is taken into account
    @projection attribuut
        [
    ${self.name} : ${self.declaredType}
 ]
}
// end::indentation[]
// tag::subprojection[]
DemoIfExpression {
    @projection DemoIfExpression
        [
        if (${self.condition}) then
                  ${self.whenTrue}
        else
           ${self.whenFalse}
        endif
        ]

    @trigger "if"
    @symbol "if"
}
// end::subprojection[]
/*
DemoIfExpression {
    @projection DemoIfExpression
        [
        (${ self.condition } ? ${ self.whenTrue } : ${self.whenFalse} )
        ]

    @trigger "if"
    @symbol "if"
}
*/
DemoPlusExpression {
    @symbol "+"
}

DemoMultiplyExpression {
    @symbol "*"
}

DemoDivideExpression {
    @symbol "/"
}
DemoLessThenExpression {
    @symbol "<"
}
DemoOrExpression {
    @symbol "or"
}



DemoEntity {
    @trigger "entity"
}

/*
DemoFunctionCallExpression {
    @projection gewoon
        [
        ${self.name} (  )
        ]
    @trigger "function2"
}
*/

// tag::newlines[]
DemoFunctionCallExpression {
    @projection DemoFunctionCallExpression
        [+
        CALL ${self.functionDefinition} (  )
        ]
    @trigger "function"
}
// end::newlines[]
// tag::lists[]
DemoModel {
    @projection DemoModel
        [
        model ${self.name} {
        entities:
            ${self.entities
                @vertical
                @terminator [\n\n]
            }
        model wide functions:
            ${self.functions @horizontal @separator [; ] }
        }
        ]
}
// end::lists[]
